#!/usr/bin/env python3
"""
üöÄ AI-Reasoning-Lab No-Docker Launcher
–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ë–ï–ó Docker (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)
"""

import os
import sys
import subprocess
import platform
import time
import shutil
import signal
from pathlib import Path

def check_python():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏"""
    if sys.version_info < (3, 9):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False

    print(f"‚úÖ Python {sys.version.split()[0]} –Ω–∞–π–¥–µ–Ω")
    return True

def check_node():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏"""
    try:
        result = subprocess.run(['node', '--version'],
                              capture_output=True, text=True, check=True)
        version = result.stdout.strip().lstrip('v').split('.')[0]

        if int(version) < 18:
            print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {result.stdout.strip()}")
            return False

        print(f"‚úÖ Node.js {result.stdout.strip()} –Ω–∞–π–¥–µ–Ω")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+")
        return False

def check_npm():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ npm"""
    try:
        result = subprocess.run(['npm', '--version'],
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ npm {result.stdout.strip()} –Ω–∞–π–¥–µ–Ω")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_poetry():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry"""
    try:
        result = subprocess.run(['poetry', '--version'],
                              capture_output=True, text=True, check=True)
        print("‚úÖ Poetry –Ω–∞–π–¥–µ–Ω")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è  Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")

        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry
            if platform.system() == "Windows":
                install_cmd = [sys.executable, "-c",
                              "(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -"]
            else:
                install_cmd = [sys.executable, "-c",
                              "import urllib.request; exec(urllib.request.urlopen('https://install.python-poetry.org').read().decode())"]

            subprocess.run(install_cmd, check=True)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Poetry –≤ PATH
            poetry_path = os.path.expanduser("~/.local/bin")
            if poetry_path not in os.environ.get("PATH", ""):
                os.environ["PATH"] = f"{poetry_path}:{os.environ.get('PATH', '')}"

            print("‚úÖ Poetry —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except subprocess.CalledProcessError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Poetry")
            return False

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    env_path = Path('.env')
    if not env_path.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞...")

        env_content = """# AI-Reasoning-Lab Configuration
PROJECT_ROOT=.

# Model Configuration (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏)
OPENAI_API_KEY=your-openai-key-here
ANTHROPIC_API_KEY=your-anthropic-key-here

# Test Configuration
BC_MODELS_0_NAME=gpt-4
BC_MODELS_0_PROVIDER=openai
BC_TESTS_TO_RUN=["t01_simple_logic", "t02_instructions"]
"""

        env_path.write_text(env_content, encoding='utf-8')
        print("‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ API –∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)")

def setup_backend():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ backend"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Backend...")
    print("=" * 25)

    backend_dir = Path("web/backend")
    os.chdir(backend_dir)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    venv_dir = Path("venv")
    if not venv_dir.exists():
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    if platform.system() == "Windows":
        activate_script = venv_dir / "Scripts" / "activate.bat"
        python_exe = venv_dir / "Scripts" / "python.exe"
    else:
        activate_script = venv_dir / "bin" / "activate"
        python_exe = venv_dir / "bin" / "python"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
    subprocess.run([str(python_exe), "-m", "pip", "install", "poetry"], check=True)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Poetry
    print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend —á–µ—Ä–µ–∑ Poetry...")
    subprocess.run([str(python_exe), "-m", "poetry", "install", "--no-root"], check=True)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir("../..")

def setup_frontend():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ frontend"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Frontend...")
    print("=" * 26)

    frontend_dir = Path("web/frontend")
    os.chdir(frontend_dir)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...")
    subprocess.run(["npm", "install"], check=True)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir("../..")

def stop_previous_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ AI-Reasoning-Lab"""
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    print("=" * 40)

    stopped_count = 0

    if platform.system() == "Windows":
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
            result = subprocess.run(['taskkill', '/F', '/IM', 'python.exe', '/T'],
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã Python")
                stopped_count += 1

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ node
            result = subprocess.run(['taskkill', '/F', '/IM', 'node.exe', '/T'],
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã Node.js")
                stopped_count += 1

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ npm
            result = subprocess.run(['taskkill', '/F', '/IM', 'npm.cmd', '/T'],
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã npm")
                stopped_count += 1

        except FileNotFoundError:
            print("‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ taskkill –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

    else:
        # –î–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (macOS, Linux)
        try:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python —Å app.main
            result = subprocess.run(['pgrep', '-f', 'python.*app.main'],
                                  capture_output=True, text=True)

            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid.strip():
                        try:
                            os.kill(int(pid), signal.SIGTERM)
                            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω backend –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")
                            stopped_count += 1
                            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        except (ProcessLookupError, OSError) as e:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ npm run dev
            result = subprocess.run(['pgrep', '-f', 'npm.*run.*dev'],
                                  capture_output=True, text=True)

            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid.strip():
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è graceful –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                            os.kill(int(pid), signal.SIGTERM)
                            time.sleep(2)  # –ñ–¥–µ–º graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                            try:
                                os.kill(int(pid), 0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                                os.kill(int(pid), signal.SIGKILL)
                                print(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω frontend –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")
                            except ProcessLookupError:
                                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω frontend –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")

                            stopped_count += 1
                        except (ProcessLookupError, OSError) as e:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ node —Å vite
            result = subprocess.run(['pgrep', '-f', 'node.*vite'],
                                  capture_output=True, text=True)

            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid.strip():
                        try:
                            os.kill(int(pid), signal.SIGTERM)
                            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω vite –ø—Ä–æ—Ü–µ—Å—Å (PID: {pid})")
                            stopped_count += 1
                            time.sleep(1)
                        except (ProcessLookupError, OSError) as e:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")

        except FileNotFoundError:
            print("‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ pgrep –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

    if stopped_count > 0:
        print(f"üéØ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {stopped_count}")
        time.sleep(3)  # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
    else:
        print("‚ÑπÔ∏è  –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def start_services():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    print("=" * 19)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = os.getcwd()
    print(f"üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")

    # –ó–∞–ø—É—Å–∫ backend
    print("üöÄ –ó–∞–ø—É—Å–∫ Backend (FastAPI)...")
    backend_dir = Path("web/backend")
    print(f"üìÅ Backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backend_dir.absolute()}")

    if platform.system() == "Windows":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ poetry –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        poetry_exe = backend_dir / "venv" / "Scripts" / "poetry.exe"
        if poetry_exe.exists():
            cmd = f'cd {backend_dir} && .\\venv\\Scripts\\python.exe -m poetry run python -m app.main'
        else:
            # –ï—Å–ª–∏ poetry –Ω–µ –≤ venv, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π
            cmd = f'cd {backend_dir} && poetry run python -m app.main'
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞ backend: {cmd}")
        subprocess.Popen(cmd, shell=True)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ poetry –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        poetry_exe = backend_dir / "venv" / "bin" / "poetry"
        if poetry_exe.exists():
            cmd = f'cd {backend_dir} && ./venv/bin/python -m poetry run python -m app.main'
        else:
            # –ï—Å–ª–∏ poetry –Ω–µ –≤ venv, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π
            cmd = f'cd {backend_dir} && poetry run python -m app.main'
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞ backend: {cmd}")
        subprocess.Popen(cmd, shell=True)

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    time.sleep(5)

    # –ó–∞–ø—É—Å–∫ frontend
    print("üöÄ –ó–∞–ø—É—Å–∫ Frontend (React)...")
    frontend_dir = Path("web/frontend")

    if platform.system() == "Windows":
        cmd = f'cd {frontend_dir} && npm run dev -- --host 0.0.0.0 --port 5173'
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞ frontend: {cmd}")
        subprocess.Popen(cmd, shell=True)
    else:
        # –î–ª—è macOS/Linux –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å TTY
        cmd = f'cd {frontend_dir} && npm run dev -- --host 0.0.0.0 --port 5173'
        print(f"üìù –ö–æ–º–∞–Ω–¥–∞ frontend: {cmd}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è stdout/stderr –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Vite
        env = os.environ.copy()
        env['CI'] = 'true'  # –û—Ç–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ Vite
        subprocess.Popen(cmd, shell=True, env=env)

def show_success():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ"""
    print("\nüéâ AI-Reasoning-Lab –∑–∞–ø—É—â–µ–Ω!")
    print("=" * 27)
    print()
    print("üì± –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:")
    print("   üåê Frontend:     http://localhost:5173")
    print("   üîå Backend API:  http://localhost:8000")
    print("   üìö API Docs:     http://localhost:8000/docs")
    print("   üîÑ ReDoc:        http://localhost:8000/redoc")
    print()
    print("üõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:")

    if platform.system() == "Windows":
        print("   –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("   –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á")
        print()
        print("üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:")
        print("   Backend:  –ò—â–∏—Ç–µ 'AI-Reasoning-Lab Backend' –≤ –î–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞—á")
        print("   Frontend: –ò—â–∏—Ç–µ 'AI-Reasoning-Lab Frontend' –≤ –î–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞—á")
    else:
        print("   –ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ps aux | grep -E '(python|npm)'")
        print("   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: kill <PID>")
        print()
        print("üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:")
        print("   Backend:  ps aux | grep 'python -m app.main'")
        print("   Frontend: ps aux | grep 'npm run dev'")

    print()
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("   –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:     QUICKSTART_WEB.md")
    print("   –ë–µ–∑ Docker:        NO_DOCKER_SETUP.md")
    print("   Production:        PRODUCTION_DEPLOYMENT.md")
    print()
    print("üéØ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-Reasoning-Lab!")
    print()
    print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ AI-Reasoning-Lab Web Interface (–ë–ï–ó Docker)...")
    print("=" * 55)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    script_dir = Path(__file__).parent.absolute()
    os.chdir(script_dir)
    print(f"üìç –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {script_dir}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_python():
        sys.exit(1)

    if not check_node():
        sys.exit(1)

    if not check_npm():
        sys.exit(1)

    if not check_poetry():
        sys.exit(1)

    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    create_env_file()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    setup_backend()
    setup_frontend()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    stop_previous_processes()

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services()

    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_success()

if __name__ == "__main__":
    main()