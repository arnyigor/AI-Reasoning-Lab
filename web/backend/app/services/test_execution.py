import asyncio
import subprocess
import json
import os
import sys
from pathlib import Path
from typing import AsyncGenerator, Dict, Any, Optional
import logging
from datetime import datetime

from app.core.config import settings
from app.models.session import Session, SessionStatus
from app.models.test import TestResult

logger = logging.getLogger(__name__)

class TestExecutionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–≤–∏–∂–æ–∫ run.py"""

    def __init__(self):
        self.project_root = settings.project_root
        self.run_script = self.project_root / "run.py"
        self.baselogic_script = self.project_root / "scripts" / "run_baselogic_benchmark.py"

    async def execute_test_session(
        self,
        session_id: str,
        test_ids: list,
        config: Dict[str, Any],
        websocket_manager: Any = None
    ) -> AsyncGenerator[Dict[str, Any], None]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç—Ä–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–∏
            env_file = await self._create_session_env_file(session_id, test_ids, config)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            yield {"type": "session_started", "session_id": session_id, "timestamp": datetime.now().isoformat()}

            async for event in self._run_test_process(session_id, env_file, websocket_manager):
                yield event

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if env_file.exists():
                env_file.unlink()

        except Exception as e:
            logger.error(f"Error executing test session {session_id}: {e}")
            yield {
                "type": "session_error",
                "session_id": session_id,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

    async def _create_session_env_file(self, session_id: str, test_ids: list, config: Dict[str, Any]) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        env_content = f"""# Temporary config for session {session_id}
BC_MODELS_0_NAME={config.get('model_name', 'gpt-4')}
BC_MODELS_0_PROVIDER={config.get('provider', 'openai')}
BC_MODELS_0_INFERENCE_STREAM={config.get('stream', 'true')}
BC_MODELS_0_INFERENCE_MAX_CHUNKS={config.get('max_chunks', '1000')}
BC_MODELS_0_GENERATION_MAX_TOKENS={config.get('max_tokens', '1000')}
BC_MODELS_0_GENERATION_STOP={json.dumps(config.get('stop_tokens', ['\\n']))}

BC_TESTS_TO_RUN={json.dumps(test_ids)}
BC_RUNS_RAW_SAVE=true

# LLM Judge configuration
BC_JUDGE_ENABLED=true
BC_JUDGE_MODEL=gpt-4
BC_JUDGE_TEMPERATURE=0.3
"""

        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if config.get('api_key'):
            env_content += f"OPENAI_API_KEY={config['api_key']}\n"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_env_file = self.project_root / f".env.session.{session_id}"
        with open(temp_env_file, 'w') as f:
            f.write(env_content)

        return temp_env_file

    async def _run_test_process(
        self,
        session_id: str,
        env_file: Path,
        websocket_manager: Any = None
    ) -> AsyncGenerator[Dict[str, Any], None]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥"""

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        cmd = [
            sys.executable,
            str(self.baselogic_script)
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è .env —Ñ–∞–π–ª–∞
        env = os.environ.copy()
        env['DOTENV_PATH'] = str(env_file)

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = await asyncio.create_subprocess_exec(
                *cmd,
                cwd=str(self.project_root),
                env=env,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            # –ß–∏—Ç–∞–µ–º stdout –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            if process.stdout:
                while True:
                    line = await process.stdout.readline()
                    if not line:
                        break

                    line_str = line.decode('utf-8', errors='ignore').strip()

                    if line_str:
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        event = self._parse_log_line(session_id, line_str)

                        if event:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
                            if websocket_manager:
                                await websocket_manager.send_event(session_id, event)

                            yield event

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            await process.wait()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º stderr –Ω–∞ –æ—à–∏–±–∫–∏
            if process.stderr:
                stderr = await process.stderr.read()
                if stderr:
                    error_msg = stderr.decode('utf-8', errors='ignore')
                    if error_msg.strip():
                        yield {
                            "type": "error",
                            "session_id": session_id,
                            "message": error_msg,
                            "timestamp": datetime.now().isoformat()
                        }

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            yield {
                "type": "session_completed",
                "session_id": session_id,
                "exit_code": process.returncode,
                "timestamp": datetime.now().isoformat()
            }

        except Exception as e:
            logger.error(f"Error running test process: {e}")
            yield {
                "type": "process_error",
                "session_id": session_id,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

    def _parse_log_line(self, session_id: str, line: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""

        # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if "‚è±Ô∏è Chunk" in line:
            # Chunk timing: "‚è±Ô∏è Chunk #1 —á–µ—Ä–µ–∑ 0.23 —Å–µ–∫"
            return {
                "type": "chunk_processed",
                "session_id": session_id,
                "content": line,
                "timestamp": datetime.now().isoformat()
            }

        elif "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" in line:
            # Model completion: "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (done=True) –Ω–∞ chunk #8"
            return {
                "type": "model_completed",
                "session_id": session_id,
                "content": line,
                "timestamp": datetime.now().isoformat()
            }

        elif "üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã" in line:
            # Platform start
            return {
                "type": "platform_started",
                "session_id": session_id,
                "content": line,
                "timestamp": datetime.now().isoformat()
            }

        elif "‚úÖ –†–∞–±–æ—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in line:
            # Platform completion
            return {
                "type": "platform_completed",
                "session_id": session_id,
                "content": line,
                "timestamp": datetime.now().isoformat()
            }

        elif any(keyword in line for keyword in ["INFO", "WARNING", "ERROR", "CRITICAL"]):
            # General log messages
            return {
                "type": "log_message",
                "session_id": session_id,
                "level": "info",  # Could parse actual level
                "content": line,
                "timestamp": datetime.now().isoformat()
            }

        # Return None for lines we don't want to stream
        return None

    async def get_session_results(self, session_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

        results_dir = self.project_root / "results" / "raw"

        if not results_dir.exists():
            return {"error": "Results directory not found"}

        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏
        session_files = list(results_dir.glob(f"*{session_id}*.json"))

        if not session_files:
            return {"error": "No results found for session"}

        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        all_results = []
        for file_path in session_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    all_results.append(data)
            except Exception as e:
                logger.error(f"Error reading results file {file_path}: {e}")

        return {
            "session_id": session_id,
            "results": all_results,
            "files_count": len(session_files)
        }