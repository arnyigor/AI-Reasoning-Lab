"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è LLM –∫–ª–∏–µ–Ω—Ç–æ–≤.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
"""
import json
import time
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Union
from dataclasses import dataclass

from .interfaces import ILLMClient, LLMClientError, LLMTimeoutError, LLMConnectionError, LLMResponseError
from .types import ModelOptions, ClientConfig
from .metrics import record_request_metrics


@dataclass
class ClientMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    total_response_time: float = 0.0
    min_response_time: float = float('inf')
    max_response_time: float = 0.0
    
    @property
    def avg_response_time(self) -> float:
        """–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        if self.successful_requests == 0:
            return 0.0
        return self.total_response_time / self.successful_requests
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.total_requests == 0:
            return 0.0
        return (self.successful_requests / self.total_requests) * 100
    
    def record_request(self, response_time: float, success: bool) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        self.total_requests += 1
        if success:
            self.successful_requests += 1
            self.total_response_time += response_time
            self.min_response_time = min(self.min_response_time, response_time)
            self.max_response_time = max(self.max_response_time, response_time)
        else:
            self.failed_requests += 1

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –ª–æ–≥–≥–µ—Ä
log = logging.getLogger(__name__)

class BaseLLMClient(ILLMClient, ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö LLM –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
    """
    
    def __init__(self, model_name: str, model_options: Optional[ModelOptions] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç.
        
        Args:
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏
            model_options: –û–ø—Ü–∏–∏ –º–æ–¥–µ–ª–∏
        """
        self.model_name = model_name
        self.model_options = model_options or {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ –æ–ø—Ü–∏–∏
        self.prompting_opts = self.model_options.get('prompting') or {}
        self.generation_opts = self.model_options.get('generation') or {}
        self.system_prompt = self.prompting_opts.get('system_prompt')
        self.inference_opts = self.model_options.get('inference') or {}
        self.query_timeout = self.model_options.get('query_timeout', 180)

        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.metrics = ClientMetrics()
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        self._validate_config()
    
    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.model_name:
            raise ValueError("model_name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if self.query_timeout <= 0:
            raise ValueError("query_timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º temperature –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        temperature = self.generation_opts.get('temperature')
        if temperature is not None:
            if not isinstance(temperature, (int, float)):
                raise ValueError("temperature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            if not 0 <= temperature <= 2:
                raise ValueError("temperature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 2]")

    def query(self, user_prompt: str) -> dict[str, Any] | None: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Dict
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –æ—Ç–≤–µ—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'thinking_response' –∏ 'llm_response'.
        """
        if not user_prompt.strip():
            raise ValueError("user_prompt –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        self.logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ '%s'", self.model_name)
        self.logger.debug("–ü—Ä–æ–º–ø—Ç: %s", user_prompt[:100] + "..." if len(user_prompt) > 100 else user_prompt)

        start_time = time.perf_counter()
        success = False

        try:
            # –í—ã–∑—ã–≤–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            response_struct = self._execute_query(user_prompt)

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ ---
            if not isinstance(response_struct, dict) or "llm_response" not in response_struct:
                raise LLMResponseError(
                    "–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'llm_response'. "
                    f"–ü–æ–ª—É—á–µ–Ω–æ: {type(response_struct)}"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            if not isinstance(response_struct.get("llm_response"), str) and response_struct.get("thinking_response"):
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ "–º—ã—Å–ª–∏", –Ω–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ - —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–Ω—ã–π, —Ö–æ—Ç—å –∏ –Ω–µ–ø–æ–ª–Ω—ã–π, –æ—Ç–≤–µ—Ç
                pass
            elif not isinstance(response_struct.get("llm_response"), str):
                raise LLMResponseError("–ö–ª—é—á 'llm_response' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É.")

            success = True
            response_time = time.perf_counter() - start_time

            self.metrics.record_request(response_time, True)
            record_request_metrics(self.model_name, response_time, True)

            self.logger.info("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ %.2f—Å", response_time)
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –º—ã—Å–ª–∏, –∏ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            thinking = response_struct.get('thinking_response', '')
            content = response_struct.get('llm_response', '')
            if thinking:
                self.logger.debug("–ú—ã—Å–ª–∏: %s", thinking[:100] + "...")
            if content:
                self.logger.debug("–û—Ç–≤–µ—Ç: %s", content[:100] + "...")

            return response_struct

        except Exception as e:
            # ... (–≤–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            pass

    @abstractmethod
    def _execute_query(self, user_prompt: str) -> Dict[str, Any]: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö.

        –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
        {
            "thinking_response": "–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...", # (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)
            "llm_response": "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏"   # (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)
        }
        """
        pass
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏.
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.
        """
        return {
            "model_name": self.model_name,
            "client_type": self.__class__.__name__,
            "options": self.model_options,
            "metrics": {
                "total_requests": self.metrics.total_requests,
                "successful_requests": self.metrics.successful_requests,
                "failed_requests": self.metrics.failed_requests,
                "avg_response_time": self.metrics.avg_response_time,
                "success_rate": self.metrics.success_rate
            }
        }
    
    def get_model_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏"""
        return self.model_name
    
    def get_metrics(self) -> ClientMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        return self.metrics
    
    def reset_metrics(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.metrics = ClientMetrics()
        self.logger.info("–ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "model_name": self.model_name,
            "total_requests": self.metrics.total_requests,
            "successful_requests": self.metrics.successful_requests,
            "failed_requests": self.metrics.failed_requests,
            "success_rate": f"{self.metrics.success_rate:.1f}%",
            "avg_response_time": f"{self.metrics.avg_response_time:.2f}—Å",
            "min_response_time": f"{self.metrics.min_response_time:.2f}—Å" if self.metrics.min_response_time != float('inf') else "N/A",
            "max_response_time": f"{self.metrics.max_response_time:.2f}—Å"
        }
    
    def _prepare_messages(self, user_prompt: str) -> list:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        """
        messages = []
        
        if self.system_prompt:
            messages.append({'role': 'system', 'content': self.system_prompt})
        
        messages.append({'role': 'user', 'content': user_prompt})
        
        return messages
    
    def _validate_response(self, response: Any) -> str:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        Raises:
            LLMResponseError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        """
        if not response:
            raise LLMResponseError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
        
        if not isinstance(response, str):
            raise LLMResponseError(f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ª—É—á–µ–Ω: {type(response)}")
        
        return response.strip()
    
    def _handle_timeout(self, timeout_seconds: float) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            timeout_seconds: –í—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.logger.warning("‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç (%d—Å)", timeout_seconds)
        raise LLMTimeoutError(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç ({timeout_seconds}—Å)")
    
    def _handle_connection_error(self, error: Exception) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        
        Args:
            error: –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞
        """
        self.logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %s", error)
        raise LLMConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error}") from error
    
    def _handle_response_error(self, error: Exception) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            error: –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞
        """
        self.logger.error("üì• –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: %s", error)
        raise LLMResponseError(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {error}") from error
