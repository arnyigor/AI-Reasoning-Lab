import logging
import re
import time
from pathlib import Path

import pandas as pd

log = logging.getLogger(__name__)


import math
from typing import Tuple

def wilson_score_interval(
        successes: int,
        total: int,
        confidence: float = 0.95
) -> Tuple[float, float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –£–∏–ª—Å–æ–Ω–∞ –¥–ª—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.

    Args:
        successes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤.
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π.
        confidence: –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.95 –¥–ª—è 95%).

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (lower_bound, upper_bound).
    """
    if total == 0:
        return (0.0, 1.0)

    # –ö–≤–∞–Ω—Ç–∏–ª—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
    # –î–ª—è 95% —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 1.96
    z = 1.959963984540054 # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    p_hat = successes / total

    # –§–æ—Ä–º—É–ª–∞ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏
    term1 = p_hat + (z**2) / (2 * total)
    term2_numerator = z * math.sqrt(
        (p_hat * (1 - p_hat)) / total + (z**2) / (4 * total**2)
    )
    term2_denominator = 1 + (z**2) / total

    lower_bound = (term1 - term2_numerator) / term2_denominator
    upper_bound = (term1 + term2_numerator) / term2_denominator

    return (lower_bound, upper_bound)


class Reporter:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    """

    def __init__(self, results_dir: Path):
        self.results_dir = results_dir
        self.all_results: pd.DataFrame = self._load_all_results()

    def _load_all_results(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        all_data = []
        json_files = sorted(list(self.results_dir.glob("*.json")))
        log.info("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞: %d", len(json_files))

        for json_file in json_files:
            try:
                data = pd.read_json(json_file)
                if not data.empty:
                    all_data.append(data)
            except Exception as e:
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %s", json_file, e)

        if not all_data:
            log.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
            return pd.DataFrame()

        combined_data = pd.concat(all_data, ignore_index=True)
        log.info("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d", len(combined_data))
        return combined_data

    def _to_markdown_table(self, df: pd.DataFrame) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ Markdown —Ç–∞–±–ª–∏—Ü—É."""
        if df.empty:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        try:
            # fillna –ø–µ—Ä–µ–¥ to_markdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return df.fillna("N/A").to_markdown() + "\n"
        except ImportError:
            log.error(
                "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown-—Ç–∞–±–ª–∏—Ü —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'tabulate'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install tabulate")
            return "–û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'tabulate' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"

    def _calculate_verbosity(self, df: pd.DataFrame) -> pd.Series:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç '–∏–Ω–¥–µ–∫—Å –±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç–∏' –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏."""

        def get_clean_len(text):
            # ... (—ç—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            pattern = re.compile(
                r"\b–û–ë–†–ê–ë–û–¢–ê–ù–û\b:.*?\b–ì–õ–ê–°–ù–´–•\b:.*?\d+",
                re.DOTALL | re.IGNORECASE
            )
            match = pattern.search(text)
            return len(match.group(0)) if match else 0

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º DataFrame
        df['raw_len'] = df['llm_response'].str.len()
        df['clean_len'] = df['llm_response'].apply(get_clean_len)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        grouped = df.groupby('model_name')

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –ø–æ –Ω—É–∂–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
        sums = grouped[['raw_len', 'clean_len']].sum()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç–∏, –∏–∑–±–µ–≥–∞—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        # –≠—Ç–æ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±, —á–µ–º .apply —Å –ª—è–º–±–¥–æ–π
        model_verbosity = (sums['raw_len'] - sums['clean_len']) / sums['raw_len']
        model_verbosity = model_verbosity.fillna(0)  # –ó–∞–º–µ–Ω—è–µ–º NaN (–µ—Å–ª–∏ raw_len –±—ã–ª 0) –Ω–∞ 0

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ–±—ã –Ω–µ "–∑–∞–≥—Ä—è–∑–Ω—è—Ç—å" –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
        df.drop(columns=['raw_len', 'clean_len'], inplace=True)

        return model_verbosity

    def generate_leaderboard_report(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤
        –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–≥–∏–π
        –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—é (–¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –£–∏–ª—Å–æ–Ω–∞).
        """
        if self.all_results.empty:
            return "# üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        # --- –≠—Ç–∞–ø 1: –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ ---
        # –ù–∞–º –Ω—É–∂–Ω—ã 'sum' (—É—Å–ø–µ—Ö–∏) –∏ 'count' (–≤—Å–µ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π)
        metrics = self.all_results.groupby('model_name').agg(
            Successes=('is_correct', 'sum'),
            Total_Runs=('is_correct', 'count'),
            Avg_Time_ms=('execution_time_ms', 'mean')
        )

        # –†–∞—Å—á–µ—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 'Verbosity_Index'
        verbosity = self._calculate_verbosity(self.all_results)
        verbosity.name = "Verbosity_Index"
        metrics = pd.concat([metrics, verbosity], axis=1)

        # --- –≠—Ç–∞–ø 2: –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç. –ø–æ–¥—Ö–æ–¥–∞ ---

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Trust_Score –∫–∞–∫ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –£–∏–ª—Å–æ–Ω–∞.
        # –≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è.
        metrics['Trust_Score'] = metrics.apply(
            lambda row: wilson_score_interval(row['Successes'], row['Total_Runs'])[0],
            axis=1
        )

        # –ù–∞–±–ª—é–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (Accuracy) –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞.
        # fillna(0) –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É –∫–∞–∫–æ–π-—Ç–æ –º–æ–¥–µ–ª–∏ 0 –∑–∞–ø—É—Å–∫–æ–≤.
        metrics['Accuracy'] = (metrics['Successes'] / metrics['Total_Runs']).fillna(0)

        # --- –≠—Ç–∞–ø 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
        metrics.sort_values(by='Trust_Score', ascending=False, inplace=True)
        metrics.insert(0, '–†–∞–Ω–≥', range(1, len(metrics) + 1))

        leaderboard_df = pd.DataFrame({
            "–†–∞–Ω–≥": metrics['–†–∞–Ω–≥'],
            "Trust_Score": metrics['Trust_Score'].map(lambda x: f"{x:.3f}"),
            "Accuracy": metrics['Accuracy'].map(lambda x: f"{x:.1%}"),
            "Verbosity": metrics['Verbosity_Index'].map(lambda x: f"{x:.1%}"),
            "Avg Time": metrics['Avg_Time_ms'].map(lambda x: f"{x:,.0f} –º—Å"),
            "Runs": metrics['Total_Runs'],
        })
        leaderboard_df.index = metrics.index
        leaderboard_df.index.name = "–ú–æ–¥–µ–ª—å"

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –û—Ç—á–µ—Ç–∞ ---
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        report_md = f"# üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ –ë–µ–Ω—á–º–∞—Ä–∫–∞\n\n"
        report_md += f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}*\n\n"

        # --- –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ---
        report_md += self._to_markdown_table(leaderboard_df)
        report_md += "\n---\n"

        # >>>>> –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –ü–û–Ø–°–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–õ–û–ì–ò–ò <<<<<
        report_md += "## üéØ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        report_md += "–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —É—Å–ª–æ–≤–∏—è—Ö, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º **–¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –£–∏–ª—Å–æ–Ω–∞**.\n\n"
        report_md += "### –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (`Accuracy`)?\n\n"
        report_md += "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º –¥–≤–µ –º–æ–¥–µ–ª–∏:\n"
        report_md += "- **–ú–æ–¥–µ–ª—å –ê (\"–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫\"):** –ü—Ä–æ—à–ª–∞ 2 —Ç–µ—Å—Ç–∞ –∏ –æ–±–∞ —Ä–µ—à–∏–ª–∞ –≤–µ—Ä–Ω–æ (–¢–æ—á–Ω–æ—Å—Ç—å: 100%).\n"
        report_md += "- **–ú–æ–¥–µ–ª—å –ë (\"–†–∞–±–æ—Ç—è–≥–∞\"):** –ü—Ä–æ—à–ª–∞ 50 —Ç–µ—Å—Ç–æ–≤ –∏ —Ä–µ—à–∏–ª–∞ –≤–µ—Ä–Ω–æ 45 (–¢–æ—á–Ω–æ—Å—Ç—å: 90%).\n\n"
        report_md += "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç \"–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞\" –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ. –û–¥–Ω–∞–∫–æ –º—ã –Ω–µ –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –µ–≥–æ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ ‚Äî –æ–Ω –º–æ–≥ –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é. –†–µ–∑—É–ª—å—Ç–∞—Ç \"–†–∞–±–æ—Ç—è–≥–∏\", –Ω–∞–ø—Ä–æ—Ç–∏–≤, –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω.\n\n"

        report_md += "### –†–µ—à–µ–Ω–∏–µ: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ `Trust_Score`\n\n"
        report_md += "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥. `Trust_Score` ‚Äî —ç—Ç–æ **–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –£–∏–ª—Å–æ–Ω–∞**. –ì–æ–≤–æ—Ä—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —ç—Ç–æ **–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –º—ã –º–æ–∂–µ–º –æ–∂–∏–¥–∞—Ç—å –æ—Ç –º–æ–¥–µ–ª–∏ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ 95%**.\n\n"
        report_md += "–í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ:\n"
        report_md += "- `Trust_Score` –ú–æ–¥–µ–ª–∏ –ê (2/2) –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ **0.206**.\n"
        report_md += "- `Trust_Score` –ú–æ–¥–µ–ª–∏ –ë (45/50) –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ **0.796**.\n\n"
        report_md += "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, \"–†–∞–±–æ—Ç—è–≥–∞\" —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∑–∞–π–º–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–µ–ª–∞—è —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞–¥–µ–∂–Ω—ã–º –∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π.\n\n"
        report_md += "---\n"

        report_md += "### üìñ –ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n\n"
        report_md += "- **–†–∞–Ω–≥**: –ò—Ç–æ–≥–æ–≤–æ–µ –º–µ—Å—Ç–æ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ `Trust_Score`.\n"
        report_md += "- **Trust_Score (–î–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π –±–∞–ª–ª)**: **–ì–ª–∞–≤–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è.** –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (—Å–º. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é –≤—ã—à–µ).\n"
        report_md += "- **Accuracy (–¢–æ—á–Ω–æ—Å—Ç—å)**: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        report_md += "**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ù–ï –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–Ω–≥):**\n\n"
        report_md += "- **Verbosity (–ë–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å)**: –î–æ–ª—è \"—à—É–º–∞\" –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏. `0%` ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ.\n"
        report_md += "- **Avg Time (–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è)**: –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.\n"
        report_md += "- **Runs (–ó–∞–ø—É—Å–∫–∏)**: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—å—é.\n\n"

        # --- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        report_md += "## üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º\n\n"
        test_stats = self.all_results.groupby(['model_name', 'category'])['is_correct'].agg(['count', 'sum'])
        test_stats['Accuracy'] = (test_stats['sum'] / test_stats['count'])
        test_stats.sort_values(by=['Accuracy', 'sum'], ascending=[False, False], inplace=True)
        test_stats.columns = ['–ü–æ–ø—ã—Ç–æ–∫', '–£—Å–ø–µ—à–Ω–æ', '–¢–æ—á–Ω–æ—Å—Ç—å']
        test_stats['–¢–æ—á–Ω–æ—Å—Ç—å'] = test_stats['–¢–æ—á–Ω–æ—Å—Ç—å'].map(lambda x: f"{x:.0%}")
        report_md += self._to_markdown_table(test_stats)
        report_md += "\n"

        report_md += "### üìñ –ö–∞–∫ —á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        report_md += "–≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç \"—Å–∏–ª—å–Ω—ã–µ\" –∏ \"—Å–ª–∞–±—ã–µ\" —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, —Ä–∞—Å–∫—Ä—ã–≤–∞—è –µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤.\n\n"
        report_md += "- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è**: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `t01_simple_logic`, `t03_code_gen`).\n"
        report_md += "- **–ü–æ–ø—ã—Ç–æ–∫**: –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –º–æ–¥–µ–ª–∏.\n"
        report_md += "- **–£—Å–ø–µ—à–Ω–æ**: –°–∫–æ–ª—å–∫–æ –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
        report_md += "- **–¢–æ—á–Ω–æ—Å—Ç—å**: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ –¥–∞–Ω–Ω–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"

        return report_md
