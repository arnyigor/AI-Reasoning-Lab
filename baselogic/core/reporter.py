from pathlib import Path

import pandas as pd


class Reporter:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    """

    def __init__(self, results_dir: Path):
        self.results_dir = results_dir
        self.all_results = self._load_all_results()

    def _load_all_results(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        all_data = []
        json_files = list(self.results_dir.glob("*.json"))

        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(json_files)}")

        for json_file in json_files:
            try:
                # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                data = pd.read_json(json_file)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {json_file.name}, –∑–∞–ø–∏—Å–µ–π: {len(data)}")
                all_data.append(data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {json_file}: {e}")
                continue

        if not all_data:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return pd.DataFrame()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω DataFrame
        combined_data = pd.concat(all_data, ignore_index=True)
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(combined_data)}")
        return combined_data

    def generate_markdown_report(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown."""
        if self.all_results.empty:
            return "# –û—Ç—á–µ—Ç –æ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ % –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        summary = self.all_results.groupby(['model_name', 'category'])['is_correct'].mean().unstack()
        summary['Overall'] = self.all_results.groupby('model_name')['is_correct'].mean()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        summary_percent = summary.map(lambda x: f"{x:.0%}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_md = "# üìä –û—Ç—á–µ—Ç –æ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ LLM\n\n"
        report_md += "## –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (% –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)\n\n"

        # –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        report_md += self._to_markdown_table(summary_percent)
        report_md += "\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        report_md += "## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)\n\n"
        time_stats = self.all_results.groupby('model_name')['execution_time_ms'].agg(['mean', 'min', 'max'])
        time_stats = time_stats.round(0).astype(int)
        time_stats.columns = ['–°—Ä–µ–¥–Ω–µ–µ', '–ú–∏–Ω', '–ú–∞–∫—Å']
        report_md += self._to_markdown_table(time_stats)
        report_md += "\n\n"

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∞–º
        report_md += "## –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º\n\n"
        test_stats = self.all_results.groupby(['model_name', 'category'])['is_correct'].agg(['count', 'sum', 'mean'])
        test_stats.columns = ['–í—Å–µ–≥–æ', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö', '–î–æ–ª—è']
        test_stats['–î–æ–ª—è'] = test_stats['–î–æ–ª—è'].map(lambda x: f"{x:.0%}")
        report_md += self._to_markdown_table(test_stats)

        return report_md

    def _to_markdown_table(self, df: pd.DataFrame) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ Markdown —Ç–∞–±–ª–∏—Ü—É."""
        if df.empty:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if isinstance(df.index, pd.MultiIndex):
            # –î–ª—è –º—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å–∞
            headers = list(df.index.names) + list(df.columns)
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            headers = ['Model'] + list(df.columns)

        lines.append("| " + " | ".join(str(h) for h in headers) + " |")
        lines.append("| " + " | ".join(["---"] * len(headers)) + " |")

        # –î–∞–Ω–Ω—ã–µ
        for idx, row in df.iterrows():
            if isinstance(idx, tuple):
                # –ú—É–ª—å—Ç–∏–∏–Ω–¥–µ–∫—Å
                row_values = [str(i) for i in idx] + [str(v) for v in row.values]
            else:
                # –û–±—ã—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                row_values = [str(idx)] + [str(v) for v in row.values]
            lines.append("| " + " | ".join(row_values) + " |")

        return "\n".join(lines) + "\n"
