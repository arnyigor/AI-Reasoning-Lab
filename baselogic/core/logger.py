import logging
import logging.handlers
from pathlib import Path
from typing import Dict, Any, Optional
from enum import Enum
import json
from datetime import datetime


class LogLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    DEBUG = logging.DEBUG
    INFO = logging.INFO
    WARNING = logging.WARNING
    ERROR = logging.ERROR
    CRITICAL = logging.CRITICAL


class LogFormat(Enum):
    """–§–æ—Ä–º–∞—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    SIMPLE = "simple"
    DETAILED = "detailed"
    JSON = "json"


class StructuredFormatter(logging.Formatter):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    def __init__(self, format_type: LogFormat = LogFormat.DETAILED):
        self.format_type = format_type
        
        if format_type == LogFormat.SIMPLE:
            fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        elif format_type == LogFormat.DETAILED:
            fmt = '%(asctime)s - %(name)s - %(levelname)s\n--- %(funcName)s:%(lineno)d ---\n%(message)s\n' + '='*80 + '\n'
        else:  # JSON
            fmt = '%(message)s'  # JSON —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        super().__init__(fmt, datefmt='%Y-%m-%d %H:%M:%S')
    
    def format(self, record):
        if self.format_type == LogFormat.JSON:
            log_entry = {
                'timestamp': datetime.fromtimestamp(record.created).isoformat(),
                'level': record.levelname,
                'logger': record.name,
                'function': record.funcName,
                'line': record.lineno,
                'message': record.getMessage()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(record, 'model_name'):
                log_entry['model_name'] = record.model_name
            if hasattr(record, 'execution_time'):
                log_entry['execution_time'] = record.execution_time
            if hasattr(record, 'test_category'):
                log_entry['test_category'] = record.test_category
                
            return json.dumps(log_entry, ensure_ascii=False)
        
        return super().format(record)


class LoggerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞–º–∏"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.loggers: Dict[str, logging.Logger] = {}
        self._setup_logging()
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        log_config = self.config.get('logging', {})
        log_level = LogLevel[log_config.get('level', 'INFO').upper()]
        log_format = LogFormat[log_config.get('format', 'DETAILED').upper()]
        log_dir = Path(log_config.get('directory', 'logs'))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level.value)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        root_logger.handlers.clear()
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(log_level.value)
        console_formatter = StructuredFormatter(LogFormat.SIMPLE)
        console_handler.setFormatter(console_formatter)
        root_logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        log_file = log_dir / "baselogic.log"
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(log_level.value)
        file_formatter = StructuredFormatter(log_format)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LLM –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        llm_log_file = log_dir / "llm_interactions.log"
        llm_handler = logging.handlers.RotatingFileHandler(
            llm_log_file,
            maxBytes=5*1024*1024,  # 5MB
            backupCount=3,
            encoding='utf-8'
        )
        llm_handler.setLevel(logging.INFO)
        llm_formatter = StructuredFormatter(LogFormat.DETAILED)
        llm_handler.setFormatter(llm_formatter)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è LLM
        llm_logger = logging.getLogger('LLM_Interactions')
        llm_logger.setLevel(logging.INFO)
        llm_logger.handlers.clear()
        llm_logger.addHandler(llm_handler)
        llm_logger.propagate = False  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        
        self.loggers['LLM_Interactions'] = llm_logger
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        if name not in self.loggers:
            self.loggers[name] = logging.getLogger(name)
        return self.loggers[name]
    
    def log_llm_interaction(self, model_name: str, prompt: str, response: str, 
                          execution_time: float, success: bool = True, 
                          error: Optional[str] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM"""
        logger = self.get_logger('LLM_Interactions')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
ü§ñ LLM –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï
–ú–æ–¥–µ–ª—å: {model_name}
–°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –û–®–ò–ë–ö–ê'}
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å
{f'–û—à–∏–±–∫–∞: {error}' if error else ''}

üì§ –ü–†–û–ú–ü–¢:
{prompt}

üì• –û–¢–í–ï–¢:
{response}
"""
        
        if success:
            logger.info(message)
        else:
            logger.error(message)
    
    def log_test_result(self, model_name: str, test_category: str, 
                       is_correct: bool, execution_time: float, 
                       expected: Any, actual: Any):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        logger = self.get_logger('Test_Results')
        
        message = f"""
üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê
–ú–æ–¥–µ–ª—å: {model_name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {test_category}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û' if is_correct else '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'}
–í—Ä–µ–º—è: {execution_time:.2f}—Å

–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}
–ü–æ–ª—É—á–µ–Ω–æ: {actual}
"""
        
        logger.info(message)
    
    def log_system_event(self, event: str, details: Optional[Dict[str, Any]] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        logger = self.get_logger('System')
        
        message = f"üîß –°–ò–°–¢–ï–ú–ù–û–ï –°–û–ë–´–¢–ò–ï: {event}"
        if details:
            message += f"\n–î–µ—Ç–∞–ª–∏: {json.dumps(details, ensure_ascii=False, indent=2)}"
        
        logger.info(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–≥–≥–µ—Ä–æ–≤
_logger_manager: Optional[LoggerManager] = None


def setup_logging(config: Optional[Dict[str, Any]] = None) -> LoggerManager:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–≥–µ—Ä–æ–≤"""
    global _logger_manager
    _logger_manager = LoggerManager(config)
    return _logger_manager


def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –ø–æ –∏–º–µ–Ω–∏"""
    global _logger_manager
    if _logger_manager is None:
        _logger_manager = LoggerManager()
    return _logger_manager.get_logger(name)


def log_llm_interaction(model_name: str, prompt: str, response: str, 
                       execution_time: float, success: bool = True, 
                       error: Optional[str] = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM"""
    global _logger_manager
    if _logger_manager is None:
        _logger_manager = LoggerManager()
    _logger_manager.log_llm_interaction(model_name, prompt, response, 
                                       execution_time, success, error)


def log_test_result(model_name: str, test_category: str, 
                   is_correct: bool, execution_time: float, 
                   expected: Any, actual: Any):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    global _logger_manager
    if _logger_manager is None:
        _logger_manager = LoggerManager()
    _logger_manager.log_test_result(model_name, test_category, 
                                   is_correct, execution_time, expected, actual)


def log_system_event(event: str, details: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
    global _logger_manager
    if _logger_manager is None:
        _logger_manager = LoggerManager()
    _logger_manager.log_system_event(event, details)


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
def setup_llm_logger():
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º"""
    return get_logger('LLM_Interactions')


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
llm_logger = setup_llm_logger()