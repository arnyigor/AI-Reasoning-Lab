import gc
import importlib
import json
import os
import threading
import time
from pathlib import Path
from typing import Dict, Any, List, Optional

import psutil

from .AdapterLLMClient import AdapterLLMClient
from .GeminiClient import GeminiClient
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ---
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç TestRunner
from .interfaces import ILLMClient, LLMClientError
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from .llm_client import LLMClient, OpenAICompatibleClient
# –ò –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫" –º–µ–∂–¥—É –Ω–∏–º–∏

from .plugin_manager import PluginManager
from .progress_tracker import ProgressTracker

import logging
# –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞. –û–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!
log = logging.getLogger(__name__)


class TestRunner:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä.
    """

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.test_generators = self._load_test_generators()
        project_root = Path(__file__).parent.parent.parent
        self.results_dir = project_root / "results" / "raw"
        self.results_dir.mkdir(parents=True, exist_ok=True)
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: %s", self.results_dir)

    def _load_test_generators(self) -> Dict[str, Any]:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ –ø–ª–∞–≥–∏–Ω—ã),
        –∞ –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ 'tests_to_run' –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
        –ü–ª–∞–≥–∏–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º.
        """
        generators = {}
        base_module_path = "baselogic.tests"

        # --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ ---
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã tXX_*.py –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests
        tests_dir = Path(__file__).parent.parent / "tests"
        for test_file in tests_dir.glob("t[0-9][0-9]_*.py"):
            test_key = test_file.stem # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .py, –Ω–∞–ø—Ä–∏–º–µ—Ä 't01_simple_logic'
            try:
                class_name_parts = test_key.split('_')[1:]
                class_name = "".join([part.capitalize() for part in class_name_parts]) + "TestGenerator"

                module_name = f"{base_module_path}.{test_key}"
                module = importlib.import_module(module_name)
                generator_class = getattr(module, class_name)

                generators[test_key] = generator_class
                log.debug("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç '%s' –Ω–∞–π–¥–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", test_key)
            except (ImportError, AttributeError) as e:
                log.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '%s'. –û—à–∏–±–∫–∞: %s", test_file.name, e)

        # --- –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –ø–ª–∞–≥–∏–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∏–º–µ–Ω ---
        log.info("üîé –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
        plugin_manager = PluginManager()
        plugins = plugin_manager.discover_plugins()
        if plugins:
            log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(plugins)}")
            for plugin_name, plugin_class in plugins.items():
                if plugin_name in generators:
                    log.info(f"  - –ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–¢ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç).")
                else:
                    log.info(f"  - –ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                generators[plugin_name] = plugin_class
        else:
            log.info("–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # --- –®–∞–≥ 3: –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ config.yaml ---
        tests_to_run_raw = self.config.get('tests_to_run', [])
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞
        if isinstance(tests_to_run_raw, str):
            tests_to_run_raw = [tests_to_run_raw]
        tests_to_run_set = set(tests_to_run_raw)
        if not tests_to_run_set:
            log.warning("–°–ø–∏—Å–æ–∫ 'tests_to_run' –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—É—Å—Ç. –¢–µ—Å—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã.")
            return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        filtered_generators = {name: gen for name, gen in generators.items() if name in tests_to_run_set}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        found_keys = set(filtered_generators.keys())
        missing_keys = tests_to_run_set - found_keys
        if missing_keys:
            log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ 'tests_to_run' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ: {', '.join(missing_keys)}")

        log.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {list(filtered_generators.keys())}")
        return filtered_generators

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
        """
        if not self.config.get('models_to_test'):
            log.error("–í 'config.yaml' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π 'models_to_test'. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        successful_models, failed_models = [], []
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        num_runs = self.config.get('runs_per_test', 1)
        total_test_cases = len(self.test_generators) * num_runs * len(self.config['models_to_test'])

        progress = ProgressTracker(total_test_cases)

        try:
            for model_config in self.config['models_to_test']:
                model_name = model_config.get('name')
                if not model_name:
                    log.warning("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–º–µ–Ω–∏ ('name'). –ü—Ä–æ–ø—É—Å–∫.")
                    continue

                log.info("=" * 80)
                log.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò: %s", model_name)
                log.info("=" * 80)

                try:
                    log.info("üîß –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
                    client = self._create_client_safely(model_config)
                    if client is None:
                        failed_models.append((model_name, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"))
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                        for _ in range(len(self.test_generators) * num_runs):
                            progress.update(model_name, "N/A")
                        continue

                    log.info("üìä –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏...")
                    model_details = client.get_model_info()

                    log.info("üß™ –≠–¢–ê–ü 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
                    model_results = self._run_tests_for_model(client, model_name, model_details, progress)

                    log.info("üíæ –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                    self._save_results(model_name, model_results)

                    if not model_results:
                        failed_models.append((model_name, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–∏"))
                    else:
                        successful_models.append(model_name)

                except Exception as e:
                    log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ %s: %s", model_name, e, exc_info=True)
                    failed_models.append((model_name, str(e)))
                    continue
        finally:
            progress.close()

        # ... (–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏)
        log.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        # ...

    # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –§–∞–±—Ä–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∞–¥–∞–ø—Ç–µ—Ä <<<<<
    def _create_client_safely(self, model_config: Dict[str, Any]) -> Optional[ILLMClient]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ LLMClient,
        –∞ –∑–∞—Ç–µ–º –≤ AdapterLLMClient, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ILLMClient.
        """
        model_name = model_config.get('name')
        client_type = model_config.get('client_type', 'openai_compatible')
        log.info("  üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ç–∏–ø–∞ '%s' –¥–ª—è –º–æ–¥–µ–ª–∏ '%s'...", client_type, model_name)

        try:
            provider = None
            if client_type == "openai_compatible":
                provider = OpenAICompatibleClient(
                    api_key=model_config.get('api_key'),
                    base_url=model_config.get('api_base')
                )
            elif client_type == "gemini":
                provider = GeminiClient(api_key=model_config.get('api_key'))
            elif client_type == "ollama":
                log.error("  ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ openai_compatible —Å http –∑–∞–ø—Ä–æ—Å–æ–º: %s", client_type)
                return None
            else:
                log.error("  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: %s", client_type)
                return None

            new_llm_client = LLMClient(provider=provider, model_config=model_config)
            adapter = AdapterLLMClient(
                new_llm_client=new_llm_client,
                model_config=model_config
            )

            log.info("  ‚úÖ –ö–ª–∏–µ–Ω—Ç –∏ –∞–¥–∞–ø—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            return adapter

        except Exception as e:
            log.error("  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %s", e, exc_info=True)
            return None

    def _run_tests_for_model(self, client: ILLMClient, model_name: str, model_details: Dict[str, Any],
                             progress: ProgressTracker) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        model_results = []
        num_runs = self.config.get('runs_per_test', 1)
        log.info("  üß™ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: %d | –ó–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %d", len(self.test_generators), num_runs)

        for test_key, generator_class in self.test_generators.items():
            log.info("  --- üìù –ö–ê–¢–ï–ì–û–†–ò–Ø: %s ---", test_key)
            try:
                generator_instance = generator_class(test_id=test_key)
                for run_num in range(1, num_runs + 1):
                    test_id = f"{test_key}_{run_num}"
                    log.info("    üîç –¢–µ—Å—Ç %d/%d: %s", run_num, num_runs, test_id)

                    test_data = generator_instance.generate()
                    result = self._run_single_test_with_monitoring(
                        client, test_id, generator_instance, test_data, model_name, model_details
                    )
                    if result:
                        model_results.append(result)

                    progress.update(model_name, test_key)
                    gc.collect()

            except Exception as e:
                log.error("    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s: %s", test_key, e, exc_info=True)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—É—Å–∫–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                for _ in range(num_runs - len(model_results) % num_runs):
                    progress.update(model_name, test_key)
        return model_results

    # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ <<<<<
    def _run_single_test_with_monitoring(self, client: ILLMClient, test_id: str,
                                         generator_instance: Any, test_data: Dict[str, Any],
                                         model_name: str, model_details: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç-–∫–µ–π—Å, —Ä–∞–±–æ—Ç–∞—è —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞.
        """
        process = psutil.Process(os.getpid())
        try:
            prompt = test_data['prompt']
            expected_output = test_data['expected_output']

            log.info("      3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")
            start_time = time.perf_counter()
            initial_ram = process.memory_info().rss / (1024 * 1024)

            # –ê–¥–∞–ø—Ç–µ—Ä client.query() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å!
            response_struct = client.query(prompt)

            end_time = time.perf_counter()
            peak_ram = process.memory_info().rss / (1024 * 1024)
            exec_time_ms = (end_time - start_time) * 1000
            ram_usage_mb = peak_ram - initial_ram

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ "–º—ã—Å–ª–∏" –∏ —á–∏—Å—Ç—ã–π "–æ—Ç–≤–µ—Ç"
            thinking_response = response_struct.get("thinking_response", "")
            llm_response = response_struct.get("llm_response", "")

            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç
            verification_result = generator_instance.verify(llm_response, expected_output)
            is_correct = verification_result.get('is_correct', False)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            status = "‚úÖ –£–°–ü–ï–•" if is_correct else "‚ùå –ù–ï–£–î–ê–ß–ê"
            log.info("    %s (%.0f –º—Å): %s", status, exec_time_ms, test_id)
            if not is_correct:
                details = verification_result.get('details', {})
                if details:
                    log.info("      --- –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
                    for key, value in details.items():
                        log.info("      - %s: %s", key, str(value)[:200])
                    log.info("      ---------------------------------")

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "test_id": test_id,
                "model_name": model_name,
                "model_details": model_details,
                "prompt": prompt,
                "thinking_log": thinking_response,
                "parsed_answer": llm_response,
                "raw_llm_output": f"<think>{thinking_response}</think>\n{llm_response}",
                "expected_output": expected_output,
                "is_correct": is_correct,
                "execution_time_ms": exec_time_ms,
                "verification_details": verification_result.get('details', {}),
                "performance_metrics": {"peak_ram_usage_mb": round(ram_usage_mb, 2)}
            }
        except LLMClientError as e:
            log.error("      ‚ùå –û—à–∏–±–∫–∞ LLM –∫–ª–∏–µ–Ω—Ç–∞: %s", e)
            return None
        except Exception as e:
            log.error("      ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç-–∫–µ–π—Å–µ %s: %s", test_id, e, exc_info=True)
            return None

    def _save_results(self, model_name: str, results: List[Dict[str, Any]]):
        if not results:
            log.warning("  ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ '%s'", model_name)
            return
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        safe_model_name = model_name.replace(":", "_").replace("/", "_")
        filename = self.results_dir / f"{safe_model_name}_{timestamp}.json"
        try:
            log.info("  üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª: %s", filename.name)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=4, default=str)
            log.info("  ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω (%d –∑–∞–ø–∏—Å–µ–π)", len(results))
        except Exception as e:
            log.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", e, exc_info=True)