import gc
import os
import re
import time
import json
import importlib
import signal
import threading
from pathlib import Path
from typing import Dict, Any, List, Optional
import logging

import psutil

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
from .client_factory import LLMClientFactory
from .interfaces import ILLMClient, LLMClientError
from .logger import setup_logging, get_logger, log_llm_interaction, log_test_result, log_system_event
from .config_validator import validate_config, get_config_summary
from .progress_tracker import ProgressTracker

from .plugin_manager import PluginManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
log = get_logger(__name__)


class TimeoutError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    pass


def timeout_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Ç–∞–π–º–∞—É—Ç–∞."""
    raise TimeoutError("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")


def run_with_timeout(func, timeout_seconds: int = 30):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º.

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏

    Raises:
        TimeoutError: –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    result = [None]
    exception = [None]

    def target():
        try:
            result[0] = func()
        except Exception as e:
            exception[0] = e

    thread = threading.Thread(target=target)
    thread.daemon = True
    thread.start()
    thread.join(timeout_seconds)

    if thread.is_alive():
        # –ü–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
        raise TimeoutError(f"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout_seconds} —Å–µ–∫—É–Ω–¥")

    if exception[0]:
        raise exception[0]

    return result[0]

class TestRunner:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏.
    """

    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TestRunner.
        """
        self.config = config
        self.test_generators = self._load_test_generators()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        project_root = Path(__file__).parent.parent.parent
        self.results_dir = project_root / "results" / "raw"
        self.results_dir.mkdir(parents=True, exist_ok=True)
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: %s", self.results_dir)

    def _load_test_generators(self) -> Dict[str, Any]:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –ø–ª–∞–≥–∏–Ω—ã.
        –ü–ª–∞–≥–∏–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.
        """
        generators = {}
        base_module_path = "baselogic.tests"
        tests_to_run_set = set(self.config.get('tests_to_run', []))

        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö" —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        # –ú—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ tests_to_run_set, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ
        if tests_to_run_set:
            for test_key in tests_to_run_set:
                try:
                    class_name_parts = test_key.split('_')[1:]
                    class_name = "".join([part.capitalize() for part in class_name_parts]) + "TestGenerator"
                    module_name = f"{base_module_path}.{test_key}"
                    module = importlib.import_module(module_name)
                    generator_class = getattr(module, class_name)
                    generators[test_key] = generator_class
                    log.info("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", test_key)
                except (ImportError, AttributeError):
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç–µ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞–≥–∏–Ω–æ–º, –∞ –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º
                    log.debug("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö.", test_key)

        # 2. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        log.info("üîé –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
        plugin_manager = PluginManager()
        plugins = plugin_manager.discover_plugins()

        if plugins:
            log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(plugins)}")
            for plugin_name, plugin_class in plugins.items():
                # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ <<<<<
                if plugin_name in generators:
                    # –≠—Ç–æ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∞ —Ñ–∏—á–∞! –°–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º.
                    log.info(f"  - –ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–¢ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç).")
                else:
                    log.info(f"  - –ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                generators[plugin_name] = plugin_class
        else:
            log.info("–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ tests_to_run
        if hasattr(self, 'config') and 'tests_to_run' in self.config and self.config['tests_to_run']:
            tests_to_run = set(self.config['tests_to_run'])
            filtered_generators = {name: gen for name, gen in generators.items() if name in tests_to_run}
            if len(filtered_generators) != len(tests_to_run):
                missing = tests_to_run - set(filtered_generators.keys())
                log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ 'tests_to_run' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(missing)}")
            return filtered_generators

        # 3. –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä tests_to_run_set)
        if tests_to_run_set:
            filtered_generators = {name: gen for name, gen in generators.items() if name in tests_to_run_set}
            if len(filtered_generators) != len(tests_to_run_set):
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö, –Ω–∏ –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö
                missing = tests_to_run_set - set(filtered_generators.keys())
                if missing:
                    log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ 'tests_to_run' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ: {', '.join(missing)}")
            return filtered_generators

        if not generators:
            log.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")

        return generators

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        """
        if not self.config.get('models_to_test'):
            log.error("–í 'config.yaml' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π 'models_to_test'. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        successful_models = []
        failed_models = []

        total_models = len(self.config.get('models_to_test', []))
        total_tests = len(self.config.get('tests_to_run', []))
        runs_per_test = self.config.get('runs_per_test', 1)

        progress = ProgressTracker(total_models, total_tests, runs_per_test)

        try:
            for model_config in self.config['models_to_test']:
                model_name = model_config.get('name')
                if not model_name:
                    log.warning("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–º–µ–Ω–∏ ('name'). –ü—Ä–æ–ø—É—Å–∫.")
                    continue

                client_type = model_config.get('client_type', 'ollama')

                log.info("=" * 80)
                log.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò: %s (–ö–ª–∏–µ–Ω—Ç: %s)", model_name, client_type)
                log.info("=" * 80)

                try:
                    # --- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
                    log.info("üîß –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
                    client = self._create_client_safely(model_config)
                    if client is None:
                        log.error("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å '%s' –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", model_name)
                        failed_models.append((model_name, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"))
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–∑–∞–≤–∏—Å–∞–ª"
                        for test_name in self.config.get('tests_to_run', []):
                            for _ in range(runs_per_test):
                                progress.update(model_name, test_name)
                        continue

                    # --- –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ ---
                    log.info("üìä –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏...")
                    model_details = self._get_model_details_safely(client, model_name)

                    # --- –≠–¢–ê–ü 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ---
                    log.info("üß™ –≠–¢–ê–ü 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
                    model_results = self._run_tests_safely(client, model_name, model_details, progress)

                    # --- –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
                    log.info("üíæ –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                    self._save_results(model_name, model_results)

                    if not model_results:
                        log.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å '%s' –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –°—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.", model_name)
                        failed_models.append((model_name, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–∏"))
                    else:
                        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                        num_correct = sum(1 for r in model_results if r.get('is_correct'))
                        total_tests_run = len(model_results)

                        if num_correct == total_tests_run:
                            log.info("‚úÖ –ú–æ–¥–µ–ª—å '%s' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã (%d –∏–∑ %d).", model_name, num_correct, total_tests_run)
                            successful_models.append(model_name)
                        else:
                            error_reason = f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ {total_tests_run - num_correct} –∏–∑ {total_tests_run} —Ç–µ—Å—Ç–æ–≤"
                            log.warning("‚ùå –ú–æ–¥–µ–ª—å '%s' –ø—Ä–æ–≤–∞–ª–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. %s.", model_name, error_reason)
                            failed_models.append((model_name, error_reason))
                    
                except Exception as e:
                    error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_name}: {e}"
                    log.error("‚ùå %s", error_msg, exc_info=True)
                    failed_models.append((model_name, str(e)))
                    continue

                log.info("=" * 80 + "\n")
        finally:
            progress.close()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        log.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d –º–æ–¥–µ–ª–µ–π", len(successful_models))
        if successful_models:
            log.info("   - %s", ", ".join(successful_models))
        
        if failed_models:
            log.warning("‚ùå –û—à–∏–±–∫–∏ –≤ %d –º–æ–¥–µ–ª—è—Ö:", len(failed_models))
            for model, error in failed_models:
                log.warning("   - %s: %s", model, error)

    def _create_client_safely(self, model_config: Dict[str, Any]) -> Optional[ILLMClient]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        model_name = model_config.get('name')
        client_type = model_config.get('client_type', 'ollama')

        try:
            log.info("  üîß –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–∏–ø–∞ '%s'...", client_type)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            client = LLMClientFactory.create_client(model_config)
            
            log.info("  ‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return client

        except LLMClientError as e:
            log.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %s", e)
            return None
        except Exception as e:
            log.error("  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %s", e, exc_info=True)
            return None

    def _get_model_details_safely(self, client: ILLMClient, model_name: str) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏."""
        try:
            log.info("  üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏ '%s'...", model_name)

            def get_details():
                return client.get_model_info()

            model_details = run_with_timeout(get_details, timeout_seconds=10)

            if "error" in model_details:
                log.warning("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: %s", model_details["error"])
                return model_details

            family = model_details.get('details', {}).get('family', 'N/A')
            quant = model_details.get('details', {}).get('quantization_level', 'N/A')
            log.info("  ‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã. –°–µ–º–µ–π—Å—Ç–≤–æ: %s, –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è: %s", family, quant)
            return model_details

        except TimeoutError:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏ (10 —Å–µ–∫)"
            log.error("  ‚ùå %s", error_msg)
            return {"error": error_msg}
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏: {e}"
            log.error("  ‚ùå %s", error_msg, exc_info=True)
            return {"error": error_msg}

    def _run_tests_safely(self, client: ILLMClient, model_name: str, model_details: Dict[str, Any], progress: ProgressTracker) -> List[Dict[str, Any]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
        model_results = []
        num_runs = self.config.get('runs_per_test', 1)

        if not self.test_generators:
            log.warning("  ‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤")
            return model_results

        log.info("  üß™ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: %d", len(self.test_generators))

        for test_key, generator_class in self.test_generators.items():
            log.info("  --- üìù –ö–ê–¢–ï–ì–û–†–ò–Ø: %s ---", test_key)

            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –û–î–ò–ù –†–ê–ó –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                generator_instance = generator_class(test_id=test_key)

                if hasattr(generator_instance, '__iter__'):
                    log.info("    –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã.")
                    test_cases_iterable = iter(generator_instance)
                else:
                    log.info("    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä. –ó–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %d", num_runs)
                    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ü–∏–∫–ª
                    test_cases_iterable = (generator_instance.generate() for _ in range(num_runs))

                run_num = 0
                for test_data in test_cases_iterable:
                    run_num += 1
                    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    current_test_id = test_data.get('test_id', f"{test_key}_{run_num}")
                    log.info("    üîç –¢–µ—Å—Ç #%d: %s", run_num, current_test_id)

                    result = self._run_single_test_with_monitoring(
                        client, current_test_id, generator_instance, test_data, model_name, model_details
                    )

                    if result:
                        model_results.append(result)
                    else:
                        log.warning("    ‚ö†Ô∏è –¢–µ—Å—Ç %s –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)", current_test_id)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞
                    progress.update(model_name, test_key)
                    gc.collect()

            except Exception as e:
                log.error("    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s: %s", test_key, e, exc_info=True)
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ –∑–∞–≤–∏—Å–Ω–µ—Ç
                for _ in range(num_runs):
                    progress.update(model_name, test_key)

        log.info("  üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏: %d", len(model_results))
        return model_results

    def _run_single_test_with_monitoring(self, client: ILLMClient, test_id: str,
                                         generator_instance: Any, test_data: Dict[str, Any],
                                         model_name: str, model_details: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç-–∫–µ–π—Å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        """
        process = psutil.Process(os.getpid())

        try:
            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if not test_data or 'prompt' not in test_data or 'expected_output' not in test_data:
                log.error("      ‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s", test_data)
                return None

            prompt = test_data['prompt']
            expected_output = test_data['expected_output']
            metadata = test_data.get('metadata', {})
            log.debug("      ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã (–ø—Ä–æ–º–ø—Ç: %d —Å–∏–º–≤–æ–ª–æ–≤)", len(prompt))

            # –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            log.info("      3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")

            start_time = time.perf_counter()
            initial_ram = process.memory_info().rss / (1024 * 1024)
            peak_ram = initial_ram

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ---
            response_struct = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            try:
                # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Å –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ç–∞–π–º–∞—É—Ç–∞
                response_container = [None]
                exception_container = [None]

                def query_target():
                    try:
                        # client.query() —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                        response_container[0] = client.query(prompt)
                    except Exception as e:
                        exception_container[0] = e

                query_thread = threading.Thread(target=query_target)
                query_thread.daemon = True
                query_thread.start()

                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RAM –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å
                while query_thread.is_alive():
                    current_ram = process.memory_info().rss / (1024 * 1024)
                    if current_ram > peak_ram:
                        peak_ram = current_ram

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –æ–ø—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞
                    query_timeout = getattr(client, 'query_timeout', 180)
                    if (time.perf_counter() - start_time) > query_timeout:
                        log.error("      ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç (%ds) –≤ TestRunner. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.", query_timeout)
                        # –ü–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –º—ã –≤—ã–π–¥–µ–º –∏–∑ —Ü–∏–∫–ª–∞
                        # –≠—Ç–æ –≥—Ä—É–±–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –Ω–æ –ª—É—á—à–µ, —á–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                        raise TimeoutError(f"–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ TestRunner: {query_timeout}s")

                    query_thread.join(0.2)

                if exception_container[0]:
                    raise exception_container[0]

                response_struct = response_container

            except (LLMClientError, TimeoutError) as e:
                log.error("      ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: %s", e)
                return None # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

            end_time = time.perf_counter()

            exec_time_ms = (end_time - start_time) * 1000
            ram_usage_mb = peak_ram - initial_ram
            log.debug("      ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω –∑–∞ %.0f –º—Å. –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM: %.2f MB", exec_time_ms, ram_usage_mb)

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ ---
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º '–º—ã—Å–ª–∏' –∏ '–æ—Ç–≤–µ—Ç' –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if isinstance(response_struct, list) and len(response_struct) == 1:
                log.info("–ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞")
                response_struct = response_struct[0]
            if isinstance(response_struct, dict):
                thinking_response = response_struct.get("thinking_response", "")
                llm_response = response_struct.get("llm_response", "")
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–µ —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ –∏–ª–∏ None)
                log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: %s", type(response_struct))
                return None

            # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ "—Å—ã—Ä–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            log.debug("      4Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º...")
            # response_struct['llm_response'] —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π "—Å—ã—Ä–æ–π" –≤—ã–≤–æ–¥ –º–æ–¥–µ–ª–∏
            raw_llm_output = response_struct.get('llm_response', '')

            # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ –∏–∑–≤–ª–µ—á—å –∏–∑ –º—É—Å–æ—Ä–∞ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            parsed_struct = generator_instance.parse_llm_output(raw_llm_output)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç –∏ –ª–æ–≥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É–ª –ø–∞—Ä—Å–µ—Ä
            final_answer_for_verify = parsed_struct.get('answer', '')
            thinking_log_from_parser = parsed_struct.get('thinking_log', raw_llm_output)

            # –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            log.debug("      5Ô∏è‚É£ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: '%s'", final_answer_for_verify)
            verification_result = generator_instance.verify(final_answer_for_verify, expected_output)
            is_correct = verification_result.get('is_correct', False)

            # –®–∞–≥ 5: –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
            final_result = {
                "test_id": test_id,
                "model_name": model_name,
                "model_details": model_details,
                "prompt": prompt,

                # --- –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
                "raw_llm_output": raw_llm_output, # –ü–æ–ª–Ω—ã–π, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
                "parsed_answer": final_answer_for_verify, # –¢–û, —á—Ç–æ –±—ã–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
                "thinking_log": thinking_log_from_parser, # –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä–æ–º.

                "expected_output": expected_output,
                "is_correct": is_correct,
                "execution_time_ms": exec_time_ms,
                "verification_details": verification_result.get('details', {}),
                "performance_metrics": {
                    "peak_ram_usage_mb": round(ram_usage_mb, 2)
                }
            }
            final_result.update(metadata)
            return final_result

        except Exception as e:
            log.error("      ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç-–∫–µ–π—Å–µ %s: %s", test_id, e, exc_info=True)
            return None


    def _save_results(self, model_name: str, results: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª."""
        if not results:
            log.warning("  ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        timestamp = time.strftime("%Y%m%d_%H%M%S")
        safe_model_name = model_name.replace(":", "_").replace("/", "_")
        filename = self.results_dir / f"{safe_model_name}_{timestamp}.json"

        try:
            log.info("  üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª: %s", filename.name)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=4, default=str)
            log.info("  ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω (%d –∑–∞–ø–∏—Å–µ–π)", len(results))
        except Exception as e:
            log.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", e, exc_info=True)
