import gc
import time
import json
import importlib
import signal
import threading
from pathlib import Path
from typing import Dict, Any, List, Optional
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
from .client_factory import LLMClientFactory
from .interfaces import ILLMClient, LLMClientError
from .logger import setup_logging, get_logger, log_llm_interaction, log_test_result, log_system_event
from .config_validator import validate_config, get_config_summary
from .progress_tracker import ProgressTracker

from .plugin_manager import PluginManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
log = get_logger(__name__)


class TimeoutError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    pass


def timeout_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Ç–∞–π–º–∞—É—Ç–∞."""
    raise TimeoutError("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")


def run_with_timeout(func, timeout_seconds: int = 30):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º.

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏

    Raises:
        TimeoutError: –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    result = [None]
    exception = [None]

    def target():
        try:
            result[0] = func()
        except Exception as e:
            exception[0] = e

    thread = threading.Thread(target=target)
    thread.daemon = True
    thread.start()
    thread.join(timeout_seconds)

    if thread.is_alive():
        # –ü–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
        raise TimeoutError(f"–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout_seconds} —Å–µ–∫—É–Ω–¥")

    if exception[0]:
        raise exception[0]

    return result[0]


class TestRunner:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏.
    """

    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TestRunner.
        """
        self.config = config
        self.test_generators = self._load_test_generators()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        project_root = Path(__file__).parent.parent.parent
        self.results_dir = project_root / "results" / "raw"
        self.results_dir.mkdir(parents=True, exist_ok=True)
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: %s", self.results_dir)

    def _load_test_generators(self) -> Dict[str, Any]:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –ø–ª–∞–≥–∏–Ω—ã.
        """
        generators = {}
        base_module_path = "baselogic.tests"

        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö" —Ç–µ—Å—Ç–æ–≤
        if 'tests_to_run' in self.config and self.config['tests_to_run']:
            for test_key in self.config['tests_to_run']:
                try:
                    class_name_parts = test_key.split('_')[1:]
                    class_name = "".join([part.capitalize() for part in class_name_parts]) + "TestGenerator"
                    module_name = f"{base_module_path}.{test_key}"
                    module = importlib.import_module(module_name)
                    generator_class = getattr(module, class_name)
                    generators[test_key] = generator_class
                    log.info("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", test_key)
                except (ImportError, AttributeError) as e:
                    log.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç '%s'. –û—à–∏–±–∫–∞: %s", test_key, e)

        # 2. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
        log.info("üîé –ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
        plugin_manager = PluginManager()
        plugins = plugin_manager.discover_plugins()
        if plugins:
            log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–≥–∏–Ω–æ–≤: {len(plugins)}")
            for plugin_name, plugin_class in plugins.items():
                if plugin_name in generators:
                    log.warning(f"‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω '{plugin_name}' –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º.")
                generators[plugin_name] = plugin_class
                log.info(f"  - –ü–ª–∞–≥–∏–Ω '{plugin_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        else:
            log.info("–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ tests_to_run
        if 'tests_to_run' in self.config and self.config['tests_to_run']:
            tests_to_run = set(self.config['tests_to_run'])
            filtered_generators = {name: gen for name, gen in generators.items() if name in tests_to_run}
            if len(filtered_generators) != len(tests_to_run):
                missing = tests_to_run - set(filtered_generators.keys())
                log.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ 'tests_to_run' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(missing)}")
            return filtered_generators
        
        if not generators:
            log.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")

        return generators

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        """
        if not self.config.get('models_to_test'):
            log.error("–í 'config.yaml' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π 'models_to_test'. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        successful_models = []
        failed_models = []

        total_models = len(self.config.get('models_to_test', []))
        total_tests = len(self.config.get('tests_to_run', []))
        runs_per_test = self.config.get('runs_per_test', 1)

        progress = ProgressTracker(total_models, total_tests, runs_per_test)

        try:
            for model_config in self.config['models_to_test']:
                model_name = model_config.get('name')
                if not model_name:
                    log.warning("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∏–º–µ–Ω–∏ ('name'). –ü—Ä–æ–ø—É—Å–∫.")
                    continue

                client_type = model_config.get('client_type', 'ollama')

                log.info("=" * 80)
                log.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò: %s (–ö–ª–∏–µ–Ω—Ç: %s)", model_name, client_type)
                log.info("=" * 80)

                try:
                    # --- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
                    log.info("üîß –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
                    client = self._create_client_safely(model_config)
                    if client is None:
                        log.error("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å '%s' –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", model_name)
                        failed_models.append((model_name, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"))
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–∑–∞–≤–∏—Å–∞–ª"
                        for test_name in self.config.get('tests_to_run', []):
                            for _ in range(runs_per_test):
                                progress.update(model_name, test_name)
                        continue

                    # --- –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ ---
                    log.info("üìä –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏...")
                    model_details = self._get_model_details_safely(client, model_name)

                    # --- –≠–¢–ê–ü 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ---
                    log.info("üß™ –≠–¢–ê–ü 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
                    model_results = self._run_tests_safely(client, model_name, model_details, progress)

                    # --- –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
                    log.info("üíæ –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                    self._save_results(model_name, model_results)

                    if not model_results:
                        log.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å '%s' –Ω–µ –¥–∞–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –°—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.", model_name)
                        failed_models.append((model_name, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–∏"))
                    else:
                        log.info("‚úÖ –ú–æ–¥–µ–ª—å '%s' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d", model_name, len(model_results))
                        successful_models.append(model_name)
                    
                except Exception as e:
                    error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_name}: {e}"
                    log.error("‚ùå %s", error_msg, exc_info=True)
                    failed_models.append((model_name, str(e)))
                    continue

                log.info("=" * 80 + "\n")
        finally:
            progress.close()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        log.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d –º–æ–¥–µ–ª–µ–π", len(successful_models))
        if successful_models:
            log.info("   - %s", ", ".join(successful_models))
        
        if failed_models:
            log.warning("‚ùå –û—à–∏–±–∫–∏ –≤ %d –º–æ–¥–µ–ª—è—Ö:", len(failed_models))
            for model, error in failed_models:
                log.warning("   - %s: %s", model, error)

    def _create_client_safely(self, model_config: Dict[str, Any]) -> Optional[ILLMClient]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        model_name = model_config.get('name')
        client_type = model_config.get('client_type', 'ollama')

        try:
            log.info("  üîß –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–∏–ø–∞ '%s'...", client_type)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            client = LLMClientFactory.create_client(model_config)
            
            log.info("  ‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return client

        except LLMClientError as e:
            log.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %s", e)
            return None
        except Exception as e:
            log.error("  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %s", e, exc_info=True)
            return None

    def _get_model_details_safely(self, client: ILLMClient, model_name: str) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏."""
        try:
            log.info("  üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏ '%s'...", model_name)

            def get_details():
                return client.get_model_info()

            model_details = run_with_timeout(get_details, timeout_seconds=10)

            if "error" in model_details:
                log.warning("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: %s", model_details["error"])
                return model_details

            family = model_details.get('details', {}).get('family', 'N/A')
            quant = model_details.get('details', {}).get('quantization_level', 'N/A')
            log.info("  ‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã. –°–µ–º–µ–π—Å—Ç–≤–æ: %s, –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è: %s", family, quant)
            return model_details

        except TimeoutError:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏ (10 —Å–µ–∫)"
            log.error("  ‚ùå %s", error_msg)
            return {"error": error_msg}
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏: {e}"
            log.error("  ‚ùå %s", error_msg, exc_info=True)
            return {"error": error_msg}

    def _run_tests_safely(self, client: ILLMClient, model_name: str, model_details: Dict[str, Any], progress: ProgressTracker) -> List[Dict[str, Any]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π."""
        model_results = []
        num_runs = self.config.get('runs_per_test', 1)

        if not self.test_generators:
            log.warning("  ‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤")
            return model_results

        log.info("  üß™ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: %d", len(self.test_generators))
        log.info("  üîÑ –ó–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %d", num_runs)

        for test_key, generator_class in self.test_generators.items():
            log.info("  --- üìù –ö–ê–¢–ï–ì–û–†–ò–Ø: %s ---", test_key)

            for run_num in range(1, num_runs + 1):
                test_id = f"{test_key}_{run_num}"
                log.info("    üîç –¢–µ—Å—Ç %d/%d: %s", run_num, num_runs, test_id)

                try:
                    result = self._run_single_test_safely(
                        client, test_key, test_id, generator_class, model_name, model_details
                    )
                    if result:
                        model_results.append(result)
                        if result['is_correct']:
                            status = "‚úÖ –£–°–ü–ï–•"
                            log.info("    %s (%.0f –º—Å): %s", status, result['execution_time_ms'], test_id)
                        else:
                            status = "‚ùå –ù–ï–£–î–ê–ß–ê"
                            verification_details = result.get('verification_details', {})
                            log.warning("    %s (%.0f –º—Å): %s", status, result['execution_time_ms'], test_id)
                            
                            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            if verification_details:
                                log.info("      --- –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
                                # –ü—Ä–æ—Å—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ, —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å
                                for key, value in verification_details.items():
                                    log.info("      - %s: %s", key, str(value)[:200]) # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                log.info("      ---------------------------------")
                    else:
                        log.warning("    ‚ö†Ô∏è –¢–µ—Å—Ç %s –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)", test_id)

                except Exception as e:
                    log.error("    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ %s: %s", test_id, e)
                    log.error("    –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:", exc_info=True)
                finally:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    progress.update(model_name, test_key)
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
                    gc.collect()

        log.info("  üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: %d", len(model_results))
        return model_results

    def _run_single_test_safely(self, client: ILLMClient, test_key: str, test_id: str,
                                generator_class: Any, model_name: str,
                                model_details: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏."""

        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            log.debug("      1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è %s", test_id)

            def create_generator():
                return generator_class(test_id=test_id)

            generator_instance = run_with_timeout(create_generator, timeout_seconds=5)
            log.debug("      ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")

            # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            log.debug("      2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

            def generate_test_data():
                return generator_instance.generate()

            test_data = run_with_timeout(generate_test_data, timeout_seconds=10)

            if not test_data or 'prompt' not in test_data or 'expected_output' not in test_data:
                log.error("      ‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s", test_data)
                return None

            prompt = test_data['prompt']
            expected_output = test_data['expected_output']
            log.debug("      ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã (–ø—Ä–æ–º–ø—Ç: %d —Å–∏–º–≤–æ–ª–æ–≤)", len(prompt))

            # –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ (—Å–∞–º–æ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ)
            log.info("      3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏...")
            log.debug("      –ü—Ä–æ–º–ø—Ç: %s", prompt[:100] + "..." if len(prompt) > 100 else prompt)

            start_time = time.perf_counter()

            llm_response = None
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                def query_model_with_timeout():
                    return client.query(prompt)

                # –í—ã–∑—ã–≤–∞–µ–º client.query —Å –æ–±—â–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é
                # –ë–µ—Ä–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –æ–ø—Ü–∏–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                query_timeout = client.model_options.get('query_timeout', 180) # 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                llm_response = run_with_timeout(query_model_with_timeout, timeout_seconds=query_timeout)

            except TimeoutError as e:
                log.error("      ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ (%ds): %s", query_timeout, e)
                return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —Å—á–∏—Ç–∞–ª—Å—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
            except LLMClientError as e:
                log.error("      ‚ùå –û—à–∏–±–∫–∞ LLM –∫–ª–∏–µ–Ω—Ç–∞: %s", e)
                return None
            end_time = time.perf_counter()

            exec_time_ms = (end_time - start_time) * 1000
            log.debug("      ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ %.0f –º—Å", exec_time_ms)
            log.debug("      –û—Ç–≤–µ—Ç: %s", llm_response[:100] + "..." if len(llm_response) > 100 else llm_response)

            # –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            log.debug("      4Ô∏è‚É£ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")

            def verify_response():
                return generator_instance.verify(llm_response, expected_output)

            verification_result = run_with_timeout(verify_response, timeout_seconds=5)
            is_correct = verification_result.get('is_correct', False)
            verification_details = verification_result.get('details', {})
            log.debug("      ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s", is_correct)

            # –®–∞–≥ 5: –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            return {
                "test_id": test_id,
                "category": test_key,
                "model_name": model_name,
                "model_details": model_details,
                "prompt": prompt,
                "llm_response": llm_response,
                "expected_output": expected_output,
                "is_correct": is_correct,
                "execution_time_ms": exec_time_ms,
                "verification_details": verification_details
            }

        except TimeoutError as e:
            log.error("      ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –≤ —Ç–µ—Å—Ç–µ %s: %s", test_id, e)
            return None
        except Exception as e:
            log.error("      ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ %s: %s", test_id, e, exc_info=True)
            return None

    def _save_results(self, model_name: str, results: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª."""
        if not results:
            log.warning("  ‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        timestamp = time.strftime("%Y%m%d_%H%M%S")
        safe_model_name = model_name.replace(":", "_").replace("/", "_")
        filename = self.results_dir / f"{safe_model_name}_{timestamp}.json"

        try:
            log.info("  üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª: %s", filename.name)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=4, default=str)
            log.info("  ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω (%d –∑–∞–ø–∏—Å–µ–π)", len(results))
        except Exception as e:
            log.error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", e, exc_info=True)
