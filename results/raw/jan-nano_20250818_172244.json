[
    {
        "test_id": "t01_simple_logic_1",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Ирина выше Виктор.\n- Дмитрий выше Ирина.\n\nВопрос: Кто из них самый высокий?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Дмитрий",
        "expected_output": {
            "correct": "Дмитрий",
            "incorrect": [
                "Ирина",
                "Виктор"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 375.5240999744274,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Дмитрий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Дмитрий"
        }
    },
    {
        "test_id": "t01_simple_logic_2",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей выше Мария.\n- Мария выше Дмитрий.\n\nВопрос: Кто из них самый высокий?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Мария",
                "Дмитрий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 88.78270001150668,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_3",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Дмитрий сильнее Борис.\n- Борис сильнее Ирина.\n\nВопрос: Кто из них самый сильный?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Дмитрий",
        "expected_output": {
            "correct": "Дмитрий",
            "incorrect": [
                "Борис",
                "Ирина"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 115.46569998608902,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Дмитрий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Дмитрий"
        }
    },
    {
        "test_id": "t01_simple_logic_4",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Наталья старше Алексей.\n- Алексей старше Елена.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Елена",
        "expected_output": {
            "correct": "Елена",
            "incorrect": [
                "Наталья",
                "Алексей"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 91.33990004193038,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Елена",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Елена"
        }
    },
    {
        "test_id": "t01_simple_logic_5",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей сильнее Мария.\n- Мария сильнее Григорий.\n\nВопрос: Кто из них самый сильный?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Мария",
                "Григорий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 86.76289999857545,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_6",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Григорий сильнее Ирина.\n- Ирина сильнее Виктор.\n\nВопрос: Кто из них самая слабая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Виктор",
        "expected_output": {
            "correct": "Виктор",
            "incorrect": [
                "Григорий",
                "Ирина"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 95.37310001906008,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Виктор",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Виктор"
        }
    },
    {
        "test_id": "t01_simple_logic_7",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Ирина быстрее Дмитрий.\n- Виктор быстрее Ирина.\n\nВопрос: Кто из них самая быстрая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Виктор",
        "expected_output": {
            "correct": "Дмитрий",
            "incorrect": [
                "Виктор",
                "Ирина"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 84.157100005541,
        "verification_details": {
            "reason": "Неверное имя или упоминание неверного имени в финальном ответе",
            "expected_name": "Дмитрий",
            "found_correct_in_cleaned": false,
            "found_incorrect_in_cleaned": true,
            "cleaned_output_snippet": "Виктор"
        }
    },
    {
        "test_id": "t01_simple_logic_8",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Наталья старше Мария.\n- Мария старше Григорий.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Григорий",
        "expected_output": {
            "correct": "Григорий",
            "incorrect": [
                "Наталья",
                "Мария"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 107.11410001385957,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Григорий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Григорий"
        }
    },
    {
        "test_id": "t01_simple_logic_9",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Григорий выше Борис.\n- Борис выше Виктор.\n\nВопрос: Кто из них самый высокий?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Григорий",
        "expected_output": {
            "correct": "Григорий",
            "incorrect": [
                "Борис",
                "Виктор"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 99.41140003502369,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Григорий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Григорий"
        }
    },
    {
        "test_id": "t01_simple_logic_10",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Жанна выше Дмитрий.\n- Дмитрий выше Елена.\n\nВопрос: Кто из них самая низкая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Елена",
        "expected_output": {
            "correct": "Елена",
            "incorrect": [
                "Жанна",
                "Дмитрий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 98.30610000062734,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Елена",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Елена"
        }
    },
    {
        "test_id": "t01_simple_logic_11",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Ирина старше Алексей.\n- Алексей старше Наталья.\n\nВопрос: Кто из них самый старший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Ирина",
        "expected_output": {
            "correct": "Ирина",
            "incorrect": [
                "Алексей",
                "Наталья"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 84.01639998191968,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Ирина",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Ирина"
        }
    },
    {
        "test_id": "t01_simple_logic_12",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей сильнее Мария.\n- Мария сильнее Борис.\n\nВопрос: Кто из них самый сильный?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Мария",
                "Борис"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 93.66610000142828,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_13",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей старше Борис.\n- Дмитрий старше Алексей.\n\nВопрос: Кто из них самый старший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Дмитрий",
        "expected_output": {
            "correct": "Дмитрий",
            "incorrect": [
                "Алексей",
                "Борис"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 110.86870002327487,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Дмитрий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Дмитрий"
        }
    },
    {
        "test_id": "t01_simple_logic_14",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Виктор старше Наталья.\n- Жанна старше Виктор.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Наталья",
        "expected_output": {
            "correct": "Наталья",
            "incorrect": [
                "Жанна",
                "Виктор"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 105.10809998959303,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Наталья",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Наталья"
        }
    },
    {
        "test_id": "t01_simple_logic_15",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Виктор быстрее Наталья.\n- Мария быстрее Виктор.\n\nВопрос: Кто из них самая быстрая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Мария",
        "expected_output": {
            "correct": "Наталья",
            "incorrect": [
                "Мария",
                "Виктор"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 84.64489999460056,
        "verification_details": {
            "reason": "Неверное имя или упоминание неверного имени в финальном ответе",
            "expected_name": "Наталья",
            "found_correct_in_cleaned": false,
            "found_incorrect_in_cleaned": true,
            "cleaned_output_snippet": "Мария"
        }
    },
    {
        "test_id": "t01_simple_logic_16",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей старше Борис.\n- Григорий старше Алексей.\n\nВопрос: Кто из них самый старший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Григорий",
        "expected_output": {
            "correct": "Григорий",
            "incorrect": [
                "Алексей",
                "Борис"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 105.43609998421744,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Григорий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Григорий"
        }
    },
    {
        "test_id": "t01_simple_logic_17",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Жанна старше Алексей.\n- Алексей старше Ирина.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Ирина",
        "expected_output": {
            "correct": "Ирина",
            "incorrect": [
                "Жанна",
                "Алексей"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 84.02989996830001,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Ирина",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Ирина"
        }
    },
    {
        "test_id": "t01_simple_logic_18",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Виктор быстрее Жанна.\n- Жанна быстрее Григорий.\n\nВопрос: Кто из них самый быстрый?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Виктор",
        "expected_output": {
            "correct": "Виктор",
            "incorrect": [
                "Жанна",
                "Григорий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 107.86720004398376,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Виктор",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Виктор"
        }
    },
    {
        "test_id": "t01_simple_logic_19",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Григорий старше Наталья.\n- Дмитрий старше Григорий.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Наталья",
        "expected_output": {
            "correct": "Наталья",
            "incorrect": [
                "Дмитрий",
                "Григорий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 102.37709997454658,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Наталья",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Наталья"
        }
    },
    {
        "test_id": "t01_simple_logic_20",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Борис сильнее Григорий.\n- Григорий сильнее Ирина.\n\nВопрос: Кто из них самый сильный?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Борис",
        "expected_output": {
            "correct": "Борис",
            "incorrect": [
                "Григорий",
                "Ирина"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 89.78239999851212,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Борис",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Борис"
        }
    },
    {
        "test_id": "t01_simple_logic_21",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Борис выше Григорий.\n- Григорий выше Дмитрий.\n\nВопрос: Кто из них самая низкая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Дмитрий",
        "expected_output": {
            "correct": "Дмитрий",
            "incorrect": [
                "Борис",
                "Григорий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 113.84850001195446,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Дмитрий",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Дмитрий"
        }
    },
    {
        "test_id": "t01_simple_logic_22",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Дмитрий старше Борис.\n- Мария старше Дмитрий.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Борис",
        "expected_output": {
            "correct": "Борис",
            "incorrect": [
                "Мария",
                "Дмитрий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 91.04279999155551,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Борис",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Борис"
        }
    },
    {
        "test_id": "t01_simple_logic_23",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Елена быстрее Виктор.\n- Виктор быстрее Дмитрий.\n\nВопрос: Кто из них самый быстрый?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Елена",
        "expected_output": {
            "correct": "Елена",
            "incorrect": [
                "Виктор",
                "Дмитрий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 85.3361000190489,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Елена",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Елена"
        }
    },
    {
        "test_id": "t01_simple_logic_24",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Мария быстрее Алексей.\n- Алексей быстрее Елена.\n\nВопрос: Кто из них самый быстрый?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Мария",
        "expected_output": {
            "correct": "Мария",
            "incorrect": [
                "Алексей",
                "Елена"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 93.13110000221059,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Мария",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Мария"
        }
    },
    {
        "test_id": "t01_simple_logic_25",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Григорий быстрее Виктор.\n- Виктор быстрее Алексей.\n\nВопрос: Кто из них самая быстрая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Григорий",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Григорий",
                "Виктор"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 98.10699999798089,
        "verification_details": {
            "reason": "Неверное имя или упоминание неверного имени в финальном ответе",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": false,
            "found_incorrect_in_cleaned": true,
            "cleaned_output_snippet": "Григорий"
        }
    },
    {
        "test_id": "t01_simple_logic_26",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Мария выше Алексей.\n- Жанна выше Мария.\n\nВопрос: Кто из них самая низкая?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Жанна",
                "Мария"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 109.3375000054948,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_27",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Виктор старше Алексей.\n- Елена старше Виктор.\n\nВопрос: Кто из них самый младший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Елена",
                "Виктор"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 84.84659995883703,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_28",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Алексей старше Дмитрий.\n- Дмитрий старше Григорий.\n\nВопрос: Кто из них самый старший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Алексей",
        "expected_output": {
            "correct": "Алексей",
            "incorrect": [
                "Дмитрий",
                "Григорий"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 91.47109999321401,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Алексей",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Алексей"
        }
    },
    {
        "test_id": "t01_simple_logic_29",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Григорий быстрее Жанна.\n- Виктор быстрее Григорий.\n\nВопрос: Кто из них самый быстрый?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Виктор",
        "expected_output": {
            "correct": "Виктор",
            "incorrect": [
                "Григорий",
                "Жанна"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 84.37890000641346,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Виктор",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Виктор"
        }
    },
    {
        "test_id": "t01_simple_logic_30",
        "category": "t01_simple_logic",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Реши простую логическую задачу.\n\nУсловия:\n- Мария старше Виктор.\n- Виктор старше Елена.\n\nВопрос: Кто из них самый старший?\n\nТвой ответ должен содержать ТОЛЬКО имя, без каких-либо объяснений или рассуждений.",
        "llm_response": "Мария",
        "expected_output": {
            "correct": "Мария",
            "incorrect": [
                "Виктор",
                "Елена"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 105.12209997978061,
        "verification_details": {
            "reason": "OK",
            "expected_name": "Мария",
            "found_correct_in_cleaned": true,
            "found_incorrect_in_cleaned": false,
            "cleaned_output_snippet": "Мария"
        }
    },
    {
        "test_id": "t02_instructions_1",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 13",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 530.7027000235394,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 13"
        }
    },
    {
        "test_id": "t02_instructions_2",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 339.67209997354075,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_3",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ехали медведи на велосипеде'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10",
        "expected_output": {
            "phrase": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 494.26329997368157,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10"
        }
    },
    {
        "test_id": "t02_instructions_4",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 696.3921000133269,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15"
        }
    },
    {
        "test_id": "t02_instructions_5",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 510.0002000108361,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_6",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 695.3061000094749,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15"
        }
    },
    {
        "test_id": "t02_instructions_7",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'мама мыла раму'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "МАМА МЫЛА РАМУ  \nГЛАСНЫХ: 7",
        "expected_output": {
            "phrase": "МАМА МЫЛА РАМУ",
            "count": "6"
        },
        "is_correct": false,
        "execution_time_ms": 330.3456000285223,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "МАМА МЫЛА РАМУ  \nГЛАСНЫХ: 7"
        }
    },
    {
        "test_id": "t02_instructions_8",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 515.2078000246547,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_9",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 340.0135000119917,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_10",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 306.9243999780156,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_11",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 513.4980999864638,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУЩКУ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_12",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 343.0904000415467,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_13",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ехали медведи на велосипеде'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10",
        "expected_output": {
            "phrase": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 510.82450000103563,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10"
        }
    },
    {
        "test_id": "t02_instructions_14",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'мама мыла раму'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "МАМА МЫЛА РАМУ  \nГЛАСНЫХ: 6",
        "expected_output": {
            "phrase": "МАМА МЫЛА РАМУ",
            "count": "6"
        },
        "is_correct": false,
        "execution_time_ms": 329.9849000177346,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "МАМА МЫЛА РАМУ  \nГЛАСНЫХ: 6"
        }
    },
    {
        "test_id": "t02_instructions_15",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ехали медведи на велосипеде'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10",
        "expected_output": {
            "phrase": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 497.9816999984905,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10"
        }
    },
    {
        "test_id": "t02_instructions_16",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 510.85419999435544,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_17",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ехали медведи на велосипеде'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 499.5041000074707,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_18",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 364.7493000025861,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_19",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'корова молоко'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "КОРОВА МОЛОКО  \nГЛАСНЫХ: 6",
        "expected_output": {
            "phrase": "КОРОВА МОЛОКО",
            "count": "6"
        },
        "is_correct": false,
        "execution_time_ms": 296.5787000139244,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "КОРОВА МОЛОКО  \nГЛАСНЫХ: 6"
        }
    },
    {
        "test_id": "t02_instructions_20",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 711.4897000137717,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14"
        }
    },
    {
        "test_id": "t02_instructions_21",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 366.42599996412173,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_22",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'hello world'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ОБРАБОТАНО: HELLO WORLD  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "HELLO WORLD",
            "count": "3"
        },
        "is_correct": true,
        "execution_time_ms": 306.5393000142649,
        "verification_details": {
            "reason": "OK",
            "expected_phrase": "HELLO WORLD",
            "extracted_phrase": "HELLO WORLD",
            "phrase_match": true,
            "expected_count": "3",
            "extracted_count": "3",
            "count_match": true
        }
    },
    {
        "test_id": "t02_instructions_23",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 690.5141000170261,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15"
        }
    },
    {
        "test_id": "t02_instructions_24",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'корова молоко'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "КОРОВА МОЛОКО  \nГЛАСНЫХ: 6",
        "expected_output": {
            "phrase": "КОРОВА МОЛОКО",
            "count": "6"
        },
        "is_correct": false,
        "execution_time_ms": 299.0635000169277,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "КОРОВА МОЛОКО  \nГЛАСНЫХ: 6"
        }
    },
    {
        "test_id": "t02_instructions_25",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 694.7065999847837,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 15"
        }
    },
    {
        "test_id": "t02_instructions_26",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'push button'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ПUSH BUTTON  \nГЛАСНЫХ: 3",
        "expected_output": {
            "phrase": "PUSH BUTTON",
            "count": "3"
        },
        "is_correct": false,
        "execution_time_ms": 221.40839998610318,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ПUSH BUTTON  \nГЛАСНЫХ: 3"
        }
    },
    {
        "test_id": "t02_instructions_27",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 699.7759999940172,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14"
        }
    },
    {
        "test_id": "t02_instructions_28",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ехали медведи на велосипеде'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ЕХАЛИ МЕДВЕДЕИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10",
        "expected_output": {
            "phrase": "ЕХАЛИ МЕДВЕДИ НА ВЕЛОСИПЕДЕ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 522.0429000328295,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ЕХАЛИ МЕДВЕДЕИ НА ВЕЛОСИПЕДЕ  \nГЛАСНЫХ: 10"
        }
    },
    {
        "test_id": "t02_instructions_29",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'шла саша по шоссе и сосала сушку'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ  \nГЛАСНЫХ: 12",
        "expected_output": {
            "phrase": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ",
            "count": "12"
        },
        "is_correct": false,
        "execution_time_ms": 512.0065999799408,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "ШЛА САША ПО ШОССЕ И СОСАЛА СУШКУ  \nГЛАСНЫХ: 12"
        }
    },
    {
        "test_id": "t02_instructions_30",
        "category": "t02_instructions",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Выполни в точности следующие инструкции по порядку:\n1. Возьми исходную фразу: 'ученье свет, не ученье как свет так на работу'.\n2. Напиши ее в ВЕРХНЕМ РЕГИСТРЕ.\n3. Посчитай количество гласных букв в исходной фразе.\n4. Выведи результат СТРОГО в следующем формате, без лишних слов:\nОБРАБОТАНО: [фраза в верхнем регистре]\nГЛАСНЫХ: [число]",
        "llm_response": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14",
        "expected_output": {
            "phrase": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ",
            "count": "15"
        },
        "is_correct": false,
        "execution_time_ms": 707.0203000330366,
        "verification_details": {
            "error": "Keywords not found in response",
            "cleaned_response_snippet": "УЧЕНЬЕ СВЕТ, НЕ УЧЕНЬЕ КАК СВЕТ ТАК НА РАБОТУ  \nГЛАСНЫХ: 14"
        }
    },
    {
        "test_id": "t03_code_gen_1",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 186.97530002100393,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_2",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(numbers):\n    return max(numbers)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 170.14740000013262,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_3",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 172.2915000282228,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_4",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 254.95680002495646,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_5",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 219.09149998100474,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_6",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 237.50579997431487,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_7",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 192.5197000382468,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_8",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 186.9334999937564,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_9",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 238.28739998862147,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_10",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 215.77529999194667,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_11",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 247.42589995730668,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_12",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 237.1856999816373,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_13",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 220.6163000082597,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_14",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 247.07659997511655,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_15",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 191.36799999978393,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_16",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 243.29339998075739,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_17",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 216.49050002451986,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_18",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 223.70669996598735,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_19",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 177.27359995478764,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_20",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 244.7421999531798,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_21",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 171.73030000412837,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_22",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 171.9948000391014,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_23",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(numbers):\n    return max(numbers)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 162.69319999264553,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_24",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 190.45399996684864,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_25",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 258.0928999814205,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_26",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 171.46230000071228,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_27",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 185.74689998058602,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_28",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def find_max(nums):\n    return max(nums)",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 183.33110003732145,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_29",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 242.82970000058413,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t03_code_gen_30",
        "category": "t03_code_gen",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Напиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.\nТвой ответ должен содержать ТОЛЬКО блок кода, без каких-либо объяснений.",
        "llm_response": "def is_palindrome(s):\n    return s == s[::-1]",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": false,
        "execution_time_ms": 239.53070002608,
        "verification_details": {
            "error": "Логическая ошибка (AssertionError)",
            "failed_test": ""
        }
    },
    {
        "test_id": "t04_data_extraction_1",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. info@my-site.co.uk",
        "expected_output": "{'info@my-site.co.uk', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 250.81960001261905,
        "verification_details": {
            "expected_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "extracted_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_2",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 231.8123999866657,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_3",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 224.67859997414052,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_4",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 236.4967999747023,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_5",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 216.80459997151047,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_6",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 208.77979998476803,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_7",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 236.2481000018306,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_8",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 216.72239998588338,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_9",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. info@my-site.co.uk",
        "expected_output": "{'user.name@company.org', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 275.29560000402853,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_10",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 216.24370000790805,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_11",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 236.081600014586,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_12",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 262.14010000694543,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_13",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. info@my-site.co.uk",
        "expected_output": "{'info@my-site.co.uk', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 231.49330000160262,
        "verification_details": {
            "expected_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "extracted_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_14",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. info@my-site.co.uk",
        "expected_output": "{'user.name@company.org', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 263.7834999477491,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_15",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. info@my-site.co.uk",
        "expected_output": "{'info@my-site.co.uk', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 244.35880000237375,
        "verification_details": {
            "expected_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "extracted_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_16",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. info@my-site.co.uk",
        "expected_output": "{'info@my-site.co.uk', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 220.6715999636799,
        "verification_details": {
            "expected_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "extracted_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_17",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 214.2617999925278,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_18",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 235.4060999932699,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_19",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 253.32379998872057,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_20",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 246.92659999709576,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_21",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 216.8379999930039,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_22",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 237.57419997127727,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_23",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. info@my-site.co.uk",
        "expected_output": "{'info@my-site.co.uk', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 233.44199999701232,
        "verification_details": {
            "expected_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "extracted_set": [
                "info@my-site.co.uk",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_24",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 233.9547000010498,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_25",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 269.6264000260271,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_26",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. test@example.com",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 232.84389998298138,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_27",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на info@my-site.co.uk. Техническая поддержка доступна по почте test@example.com. Наш главный офис находится в Москве.\"",
        "llm_response": "1. info@my-site.co.uk  \n2. test@example.com",
        "expected_output": "{'test@example.com', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 234.29990001022816,
        "verification_details": {
            "expected_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "test@example.com",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_28",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на user.name@company.org. Техническая поддержка доступна по почте info@my-site.co.uk. Наш главный офис находится в Москве.\"",
        "llm_response": "1. user.name@company.org  \n2. info@my-site.co.uk",
        "expected_output": "{'user.name@company.org', 'info@my-site.co.uk'}",
        "is_correct": true,
        "execution_time_ms": 263.8170000282116,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "extracted_set": [
                "user.name@company.org",
                "info@my-site.co.uk"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_29",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 237.72110004210845,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t04_data_extraction_30",
        "category": "t04_data_extraction",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Извлеки все email-адреса из текста ниже и представь их в виде нумерованного списка.\n\nТекст: \"Для связи с отделом продаж, пишите на test@example.com. Техническая поддержка доступна по почте user.name@company.org. Наш главный офис находится в Москве.\"",
        "llm_response": "1. test@example.com  \n2. user.name@company.org",
        "expected_output": "{'user.name@company.org', 'test@example.com'}",
        "is_correct": true,
        "execution_time_ms": 227.5478999945335,
        "verification_details": {
            "expected_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "extracted_set": [
                "user.name@company.org",
                "test@example.com"
            ],
            "missed": [],
            "extra": []
        }
    },
    {
        "test_id": "t05_summarization_1",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко можно приручить и обучить пользоваться лотком.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 496.8743000063114,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко можно приручить и обучить пользоваться лотком."
        }
    },
    {
        "test_id": "t05_summarization_2",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии, который можно преобразовать в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 620.0045000296086,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии, который можно преобразовать в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_3",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — популярные домашние животные, которые известны своей независимостью и могут быть приучены к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": true,
        "execution_time_ms": 499.9983999878168,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — популярные домашние животные, которые известны своей независимостью и могут быть приучены к лотку."
        }
    },
    {
        "test_id": "t05_summarization_4",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии на Земле, который преобразуется в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 656.254900037311,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии на Земле, который преобразуется в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_5",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии на Земле, который можно преобразовать в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 659.9266999983229,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии на Земле, который можно преобразовать в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_6",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии, который преобразуется фотоэлектрическими панелями в электричество.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 572.5577000412159,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии, который преобразуется фотоэлектрическими панелями в электричество."
        }
    },
    {
        "test_id": "t05_summarization_7",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые можно приручить и обучить использовать лоток.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 460.8052000403404,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые можно приручить и обучить использовать лоток."
        }
    },
    {
        "test_id": "t05_summarization_8",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это излучение Солнца, которое можно использовать для производства электричества с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 616.798100003507,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это излучение Солнца, которое можно использовать для производства электричества с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_9",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии, который преобразуется фотоэлектрическими панелями в электричество.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 581.2454000115395,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии, который преобразуется фотоэлектрическими панелями в электричество."
        }
    },
    {
        "test_id": "t05_summarization_10",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко приучаются к использованию лотка.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 432.3450000374578,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко приучаются к использованию лотка."
        }
    },
    {
        "test_id": "t05_summarization_11",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко можно приучать к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 407.8317999956198,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко можно приучать к лотку."
        }
    },
    {
        "test_id": "t05_summarization_12",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — популярные домашние животные, которые известны своей независимостью и могут быть обучены использованию лотка.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": true,
        "execution_time_ms": 509.9667999893427,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — популярные домашние животные, которые известны своей независимостью и могут быть обучены использованию лотка."
        }
    },
    {
        "test_id": "t05_summarization_13",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко приучаются к использованию лотка.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 428.3138000173494,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко приучаются к использованию лотка."
        }
    },
    {
        "test_id": "t05_summarization_14",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко можно приучить к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 422.81289998209104,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко можно приучить к лотку."
        }
    },
    {
        "test_id": "t05_summarization_15",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Самая главная мысль текста: Солнечная энергия — это обильный источник энергии на Земле, который можно использовать для производства электричества с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 843.2113999733701,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Самая главная мысль текста: Солнечная энергия — это обильный источник энергии на Земле, который можно использовать для производства электричества с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_16",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые легко можно приучать к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 433.071099978406,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые легко можно приучать к лотку."
        }
    },
    {
        "test_id": "t05_summarization_17",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это излучение Солнца, которое можно преобразовать в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 604.9883000086993,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это излучение Солнца, которое можно преобразовать в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_18",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки — независимые домашние животные, которые могут быть обучены использовать лоток.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 403.0598999815993,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки — независимые домашние животные, которые могут быть обучены использовать лоток."
        }
    },
    {
        "test_id": "t05_summarization_19",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии, который можно преобразовать в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 634.4205999630503,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии, который можно преобразовать в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_20",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии, который преобразуется в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 604.2679999954998,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии, который преобразуется в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_21",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия, получаемая с помощью фотоэлектрических панелей, является обильным источником электричества на Земле.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 635.1056999992579,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия, получаемая с помощью фотоэлектрических панелей, является обильным источником электричества на Земле."
        }
    },
    {
        "test_id": "t05_summarization_22",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 515.9086000057869,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к лотку."
        }
    },
    {
        "test_id": "t05_summarization_23",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к использованию лотка.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 531.857600028161,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к использованию лотка."
        }
    },
    {
        "test_id": "t05_summarization_24",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки являются популярными домашними животными, которые отличаются независимым характером и могут быть обучены использовать лоток.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 502.4322000099346,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки являются популярными домашними животными, которые отличаются независимым характером и могут быть обучены использовать лоток."
        }
    },
    {
        "test_id": "t05_summarization_25",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это излучение Солнца, которое преобразуется в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 603.0547000118531,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это излучение Солнца, которое преобразуется в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_26",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к использованию лотка.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 565.7377000316046,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к использованию лотка."
        }
    },
    {
        "test_id": "t05_summarization_27",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Кошки — популярные домашние животные. Они известны своей независимостью. Большинство кошек можно приучить к лотку.\"",
        "llm_response": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к лотку.",
        "expected_output": "Кошки — популярные домашние животные.",
        "is_correct": false,
        "execution_time_ms": 502.6202999870293,
        "verification_details": {
            "expected_sentence": "Кошки — популярные домашние животные.",
            "llm_output": "Кошки являются популярными домашними животными, которые известны своей независимостью и могут быть приучены к лотку."
        }
    },
    {
        "test_id": "t05_summarization_28",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Самая главная мысль текста: Солнечная энергия — это обильный источник энергии на Земле, который можно использовать для производства электричества с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 844.4204999832436,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Самая главная мысль текста: Солнечная энергия — это обильный источник энергии на Земле, который можно использовать для производства электричества с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_29",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это обильный источник энергии на Земле, который преобразуется в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 644.5931000052951,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это обильный источник энергии на Земле, который преобразуется в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t05_summarization_30",
        "category": "t05_summarization",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Внимательно прочти текст. Суммируй его ОДНИМ предложением, выбрав самую главную мысль из самого текста.\n\nТекст: \"Солнечная энергия — это излучение Солнца. Это самый обильный источник энергии на Земле. Фотоэлектрические панели преобразуют солнечный свет в электричество.\"",
        "llm_response": "Солнечная энергия — это излучение Солнца, которое можно преобразовать в электричество с помощью фотоэлектрических панелей.",
        "expected_output": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
        "is_correct": false,
        "execution_time_ms": 588.3306000032462,
        "verification_details": {
            "expected_sentence": "Фотоэлектрические панели преобразуют солнечный свет в электричество.",
            "llm_output": "Солнечная энергия — это излучение Солнца, которое можно преобразовать в электричество с помощью фотоэлектрических панелей."
        }
    },
    {
        "test_id": "t06_mathematics_1",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (9 - 7) * 4",
        "llm_response": "4",
        "expected_output": "8",
        "is_correct": false,
        "execution_time_ms": 76.55309996334836,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "8",
            "extracted_numbers": "[4]",
            "llm_output_snippet": "4"
        }
    },
    {
        "test_id": "t06_mathematics_2",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (16 + 3) - 3",
        "llm_response": "16 + 3 = 19  \n19 - 3 = 16  \n\nОтвет: 16",
        "expected_output": "16",
        "is_correct": true,
        "execution_time_ms": 398.6737999948673,
        "verification_details": {
            "reason": "OK",
            "expected_number": "16",
            "extracted_numbers": "[16, 3, 19, 19, 3, 16, 16]",
            "llm_output_snippet": "16 + 3 = 19  \n19 - 3 = 16  \n\nОтвет: 16"
        }
    },
    {
        "test_id": "t06_mathematics_3",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (18 - 2) * 3",
        "llm_response": "48",
        "expected_output": "48",
        "is_correct": true,
        "execution_time_ms": 69.98549995478243,
        "verification_details": {
            "reason": "OK",
            "expected_number": "48",
            "extracted_numbers": "[48]",
            "llm_output_snippet": "48"
        }
    },
    {
        "test_id": "t06_mathematics_4",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (6 - 5) * 5",
        "llm_response": "5",
        "expected_output": "5",
        "is_correct": true,
        "execution_time_ms": 43.2448000065051,
        "verification_details": {
            "reason": "OK",
            "expected_number": "5",
            "extracted_numbers": "[5]",
            "llm_output_snippet": "5"
        }
    },
    {
        "test_id": "t06_mathematics_5",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (12 + 2) - 4",
        "llm_response": "16",
        "expected_output": "10",
        "is_correct": false,
        "execution_time_ms": 58.06220002705231,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "10",
            "extracted_numbers": "[16]",
            "llm_output_snippet": "16"
        }
    },
    {
        "test_id": "t06_mathematics_6",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (13 - 9) + 4",
        "llm_response": "4",
        "expected_output": "8",
        "is_correct": false,
        "execution_time_ms": 47.8554000146687,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "8",
            "extracted_numbers": "[4]",
            "llm_output_snippet": "4"
        }
    },
    {
        "test_id": "t06_mathematics_7",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (10 * 2) + 5",
        "llm_response": "25",
        "expected_output": "25",
        "is_correct": true,
        "execution_time_ms": 59.31759998202324,
        "verification_details": {
            "reason": "OK",
            "expected_number": "25",
            "extracted_numbers": "[25]",
            "llm_output_snippet": "25"
        }
    },
    {
        "test_id": "t06_mathematics_8",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (3 - 5) * 4",
        "llm_response": "-8",
        "expected_output": "-8",
        "is_correct": true,
        "execution_time_ms": 58.17560001742095,
        "verification_details": {
            "reason": "OK",
            "expected_number": "-8",
            "extracted_numbers": "[-8]",
            "llm_output_snippet": "-8"
        }
    },
    {
        "test_id": "t06_mathematics_9",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (4 - 6) + 2",
        "llm_response": "-6 + 2 = -4",
        "expected_output": "0",
        "is_correct": false,
        "execution_time_ms": 159.4143999973312,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "0",
            "extracted_numbers": "[-6, 2, -4]",
            "llm_output_snippet": "-6 + 2 = -4"
        }
    },
    {
        "test_id": "t06_mathematics_10",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (12 * 8) + 3",
        "llm_response": "99",
        "expected_output": "99",
        "is_correct": true,
        "execution_time_ms": 85.64649999607354,
        "verification_details": {
            "reason": "OK",
            "expected_number": "99",
            "extracted_numbers": "[99]",
            "llm_output_snippet": "99"
        }
    },
    {
        "test_id": "t06_mathematics_11",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (20 * 4) + 3",
        "llm_response": "35",
        "expected_output": "83",
        "is_correct": false,
        "execution_time_ms": 59.93400001898408,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "83",
            "extracted_numbers": "[35]",
            "llm_output_snippet": "35"
        }
    },
    {
        "test_id": "t06_mathematics_12",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (14 + 1) * 3",
        "llm_response": "45",
        "expected_output": "45",
        "is_correct": true,
        "execution_time_ms": 58.09629999566823,
        "verification_details": {
            "reason": "OK",
            "expected_number": "45",
            "extracted_numbers": "[45]",
            "llm_output_snippet": "45"
        }
    },
    {
        "test_id": "t06_mathematics_13",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (7 + 2) - 5",
        "llm_response": "4",
        "expected_output": "4",
        "is_correct": true,
        "execution_time_ms": 42.98699996434152,
        "verification_details": {
            "reason": "OK",
            "expected_number": "4",
            "extracted_numbers": "[4]",
            "llm_output_snippet": "4"
        }
    },
    {
        "test_id": "t06_mathematics_14",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (15 - 10) + 4",
        "llm_response": "(15 - 10) + 4 = 5 + 4 = 9",
        "expected_output": "9",
        "is_correct": true,
        "execution_time_ms": 331.70040004188195,
        "verification_details": {
            "reason": "OK",
            "expected_number": "9",
            "extracted_numbers": "[15, 10, 4, 5, 4, 9]",
            "llm_output_snippet": "(15 - 10) + 4 = 5 + 4 = 9"
        }
    },
    {
        "test_id": "t06_mathematics_15",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (19 * 7) - 3",
        "llm_response": "136",
        "expected_output": "130",
        "is_correct": false,
        "execution_time_ms": 71.28560001729056,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "130",
            "extracted_numbers": "[136]",
            "llm_output_snippet": "136"
        }
    },
    {
        "test_id": "t06_mathematics_16",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (16 * 10) - 5",
        "llm_response": "160 - 5 = 155",
        "expected_output": "155",
        "is_correct": true,
        "execution_time_ms": 199.63210000423715,
        "verification_details": {
            "reason": "OK",
            "expected_number": "155",
            "extracted_numbers": "[160, 5, 155]",
            "llm_output_snippet": "160 - 5 = 155"
        }
    },
    {
        "test_id": "t06_mathematics_17",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (12 + 7) * 4",
        "llm_response": "84",
        "expected_output": "76",
        "is_correct": false,
        "execution_time_ms": 57.28609999641776,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "76",
            "extracted_numbers": "[84]",
            "llm_output_snippet": "84"
        }
    },
    {
        "test_id": "t06_mathematics_18",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (5 * 2) - 5",
        "llm_response": "5",
        "expected_output": "5",
        "is_correct": true,
        "execution_time_ms": 57.03389999689534,
        "verification_details": {
            "reason": "OK",
            "expected_number": "5",
            "extracted_numbers": "[5]",
            "llm_output_snippet": "5"
        }
    },
    {
        "test_id": "t06_mathematics_19",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (6 + 4) * 2",
        "llm_response": "20",
        "expected_output": "20",
        "is_correct": true,
        "execution_time_ms": 57.399399986024946,
        "verification_details": {
            "reason": "OK",
            "expected_number": "20",
            "extracted_numbers": "[20]",
            "llm_output_snippet": "20"
        }
    },
    {
        "test_id": "t06_mathematics_20",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (8 * 2) + 2",
        "llm_response": "16 + 2 = 18",
        "expected_output": "18",
        "is_correct": true,
        "execution_time_ms": 173.48989995662123,
        "verification_details": {
            "reason": "OK",
            "expected_number": "18",
            "extracted_numbers": "[16, 2, 18]",
            "llm_output_snippet": "16 + 2 = 18"
        }
    },
    {
        "test_id": "t06_mathematics_21",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (2 * 2) + 3",
        "llm_response": "7",
        "expected_output": "7",
        "is_correct": true,
        "execution_time_ms": 64.46690001757815,
        "verification_details": {
            "reason": "OK",
            "expected_number": "7",
            "extracted_numbers": "[7]",
            "llm_output_snippet": "7"
        }
    },
    {
        "test_id": "t06_mathematics_22",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (9 + 10) - 2",
        "llm_response": "19",
        "expected_output": "17",
        "is_correct": false,
        "execution_time_ms": 59.14250004570931,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "17",
            "extracted_numbers": "[19]",
            "llm_output_snippet": "19"
        }
    },
    {
        "test_id": "t06_mathematics_23",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (6 - 4) * 5",
        "llm_response": "10",
        "expected_output": "10",
        "is_correct": true,
        "execution_time_ms": 57.34090000623837,
        "verification_details": {
            "reason": "OK",
            "expected_number": "10",
            "extracted_numbers": "[10]",
            "llm_output_snippet": "10"
        }
    },
    {
        "test_id": "t06_mathematics_24",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (3 + 5) - 3",
        "llm_response": "5",
        "expected_output": "5",
        "is_correct": true,
        "execution_time_ms": 61.29709997912869,
        "verification_details": {
            "reason": "OK",
            "expected_number": "5",
            "extracted_numbers": "[5]",
            "llm_output_snippet": "5"
        }
    },
    {
        "test_id": "t06_mathematics_25",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (3 + 8) * 3",
        "llm_response": "33",
        "expected_output": "33",
        "is_correct": true,
        "execution_time_ms": 59.084400010760874,
        "verification_details": {
            "reason": "OK",
            "expected_number": "33",
            "extracted_numbers": "[33]",
            "llm_output_snippet": "33"
        }
    },
    {
        "test_id": "t06_mathematics_26",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (4 - 1) + 5",
        "llm_response": "6",
        "expected_output": "8",
        "is_correct": false,
        "execution_time_ms": 67.78650003252551,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "8",
            "extracted_numbers": "[6]",
            "llm_output_snippet": "6"
        }
    },
    {
        "test_id": "t06_mathematics_27",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (16 - 7) * 5",
        "llm_response": "45",
        "expected_output": "45",
        "is_correct": true,
        "execution_time_ms": 62.890200002584606,
        "verification_details": {
            "reason": "OK",
            "expected_number": "45",
            "extracted_numbers": "[45]",
            "llm_output_snippet": "45"
        }
    },
    {
        "test_id": "t06_mathematics_28",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (12 - 7) + 3",
        "llm_response": "4",
        "expected_output": "8",
        "is_correct": false,
        "execution_time_ms": 61.74340000143275,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "8",
            "extracted_numbers": "[4]",
            "llm_output_snippet": "4"
        }
    },
    {
        "test_id": "t06_mathematics_29",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (9 * 9) + 5",
        "llm_response": "86",
        "expected_output": "86",
        "is_correct": true,
        "execution_time_ms": 59.78439998580143,
        "verification_details": {
            "reason": "OK",
            "expected_number": "86",
            "extracted_numbers": "[86]",
            "llm_output_snippet": "86"
        }
    },
    {
        "test_id": "t06_mathematics_30",
        "category": "t06_mathematics",
        "model_name": "jan-nano",
        "model_details": {
            "model_name": "jan-nano",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Вычисли значение следующего арифметического выражения. В ответе укажи ТОЛЬКО финальное число, без каких-либо дополнительных слов или объяснений.\n\nВыражение: (14 + 5) * 4",
        "llm_response": "84",
        "expected_output": "76",
        "is_correct": false,
        "execution_time_ms": 62.41729995235801,
        "verification_details": {
            "reason": "Правильное число не найдено среди извлеченных",
            "expected_number": "76",
            "extracted_numbers": "[84]",
            "llm_output_snippet": "84"
        }
    }
]