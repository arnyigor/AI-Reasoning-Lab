[
    {
        "test_id": "t03_code_gen_1",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.",
        "llm_response": "```python\ndef find_max(numbers):\n    if not numbers:\n        return None  # Handle empty list case\n    return max(numbers)\n```",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1320.0980999972671,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_2",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.",
        "llm_response": "```python\ndef find_max(numbers):\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n```",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1462.5760999624617,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_3",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.",
        "llm_response": "```python\ndef find_max(numbers):\n    if not numbers:\n        return None  # Обработка пустого списка\n    return max(numbers)\n```",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 892.5522000063211,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_4",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.",
        "llm_response": "```python\ndef find_max(numbers):\n  if not numbers:\n    return None\n  max_num = numbers[0]\n  for num in numbers:\n    if num > max_num:\n      max_num = num\n  return max_num\n```",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1906.770100002177,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_5",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.",
        "llm_response": "```python\ndef is_palindrome(s):\n    processed_string = ''.join(filter(str.isalnum, s)).lower()\n    return processed_string == processed_string[::-1]\n```",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1513.0636999965645,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_6",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.",
        "llm_response": "```python\ndef is_palindrome(s):\n    processed_string = ''.join(filter(str.isalnum, s)).lower()\n    return processed_string == processed_string[::-1]\n```",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1268.5902999946848,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_7",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `find_max`, которая находит максимальное значение в списке чисел.",
        "llm_response": "```python\ndef find_max(numbers):\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n```",
        "expected_output": {
            "function_name": "find_max",
            "tests": [
                "assert find_max([1, 2, 3, 4, 5]) == 5",
                "assert find_max([-1, -5, 0]) == 0",
                "assert find_max([10]) == 10"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1473.6456999671645,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_8",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.",
        "llm_response": "```python\ndef is_palindrome(s):\n    processed_string = ''.join(filter(str.isalnum, s)).lower()\n    return processed_string == processed_string[::-1]\n```",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1112.719900032971,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_9",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.",
        "llm_response": "```python\ndef is_palindrome(s):\n    processed_string = ''.join(filter(str.isalnum, s)).lower()\n    return processed_string == processed_string[::-1]\n```",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1080.5712000001222,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    },
    {
        "test_id": "t03_code_gen_10",
        "category": "t03_code_gen",
        "model_name": "google/gemma-3n-e4b",
        "model_details": {
            "model_name": "google/gemma-3n-e4b",
            "client_type": "openai_compatible",
            "options": {},
            "metrics": {
                "total_requests": 0,
                "successful_requests": 0,
                "failed_requests": 0,
                "avg_response_time": 0.0,
                "success_rate": 0.0
            },
            "api_url": "http://127.0.0.1:1234/v1/chat/completions",
            "modelfile": "N/A (API)",
            "parameters": "N/A (API)",
            "template": "N/A (API)",
            "details": {
                "family": "api",
                "parameter_size": "N/A",
                "quantization_level": "API",
                "format": "api"
            },
            "object": "model"
        },
        "prompt": "Ты — AI-ассистент, который пишет код на Python. Твоя задача — вернуть ТОЛЬКО блок кода, без каких-либо объяснений или рассуждений.\n\n--- ПРИМЕР ЗАПРОСА ---\nНапиши функцию на Python с именем `add`, которая складывает два числа.\n\n--- ПРИМЕР ОТВЕТА ---\n```python\ndef add(a, b):\n    return a + b\n```\n\n--- ТВОЯ ЗАДАЧА ---\nНапиши функцию на Python с именем `is_palindrome`, которая проверяет, является ли строка палиндромом.",
        "llm_response": "```python\ndef is_palindrome(text):\n    processed_text = ''.join(filter(str.isalnum, text)).lower()\n    return processed_text == processed_text[::-1]\n```",
        "expected_output": {
            "function_name": "is_palindrome",
            "tests": [
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('A man a plan a canal Panama') == True"
            ]
        },
        "is_correct": true,
        "execution_time_ms": 1072.9290000163019,
        "verification_details": {
            "status": "Все тесты пройдены"
        }
    }
]