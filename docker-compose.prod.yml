version: '3.8'

services:
  # Backend API - Production
  backend:
    build:
      context: ./web/backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PROJECT_ROOT=/app/../../../..
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - .:/app/../../../..
      - ./web/backend/data:/app/data
      - ./results:/app/../../../results
    depends_on:
      - redis
      - postgres
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Production with Nginx
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    environment:
      - VITE_API_BASE=http://backend:8000
    depends_on:
      - backend
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ai_reasoning_lab
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user -d ai_reasoning_lab"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for sessions and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_pass}
    volumes:
      - redis_data:/data
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Reverse Proxy - Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    profiles:
      - ssl

  # Log aggregation - Fluentd
  fluentd:
    build:
      context: ./monitoring/fluentd
      dockerfile: Dockerfile
    volumes:
      - ./logs:/fluentd/log
      - fluentd_buffer:/fluentd/buffer
    networks:
      - ai-reasoning-lab-prod
    restart: unless-stopped
    profiles:
      - logging

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_logs:
  fluentd_buffer:

networks:
  ai-reasoning-lab-prod:
    driver: bridge