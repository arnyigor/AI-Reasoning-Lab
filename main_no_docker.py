"""
AI-Reasoning-Lab Web Interface (No Docker Version)
–ï–¥–∏–Ω—ã–π –±—ç–∫–µ–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ Docker
"""

import asyncio
import io
import sys
import traceback
import threading
from contextlib import redirect_stdout, redirect_stderr
from typing import List, Dict, Any, Optional
import os
import subprocess
import json
import signal

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
import uvicorn
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------------------
# 1. ConnectionManager –∏–∑ scripts/connection_manager.py (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
# -----------------------------------------------------------------------------
class ConnectionManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è real-time –ª–æ–≥–æ–≤"""

    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.logger = logging.getLogger(__name__)

    async def connect(self, websocket: WebSocket):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        await websocket.accept()
        self.active_connections.append(websocket)
        self.logger.info("WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
            self.logger.info("WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

    async def broadcast(self, message: str, msg_type: str = "log"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        if not self.active_connections:
            return

        payload = {"type": msg_type, "content": message}
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        tasks = [connection.send_json(payload) for connection in self.active_connections]
        await asyncio.gather(*tasks, return_exceptions=True)

# -----------------------------------------------------------------------------
# 2. –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ stdout/stderr
# -----------------------------------------------------------------------------
log_queue = asyncio.Queue()
manager = ConnectionManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_to_console = True  # –í—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏ –≤ Python –∫–æ–Ω—Å–æ–ª—å

# -----------------------------------------------------------------------------
# 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
# -----------------------------------------------------------------------------
def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 9):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = ['fastapi', 'uvicorn', 'websockets']
    missing = []

    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing.append(module)

    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True

def kill_existing_server(port=8000):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–ª—É—à–∞—é—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lsof –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É
        result = subprocess.run(['lsof', '-ti', f':{port}'],
                              capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid.strip():
                    try:
                        os.kill(int(pid), signal.SIGTERM)
                        print(f"üõë –ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                        import time
                        time.sleep(1)
                    except ProcessLookupError:
                        pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
        else:
            print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")
    except FileNotFoundError:
        print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ lsof –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ä—Ç–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ {port}: {e}")

# -----------------------------------------------------------------------------
# 4. –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
# -----------------------------------------------------------------------------
def run_baselogic_benchmark():
    """–ó–∞–ø—É—Å–∫ baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    print("üöÄ –ó–∞–ø—É—Å–∫ baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞...")
    import time
    for i in range(3):
        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ {i+1}/3...")
        time.sleep(1)
    print("‚úÖ Baselogic –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")

def run_grandmaster_benchmark():
    """–ó–∞–ø—É—Å–∫ grandmaster –±–µ–Ω—á–º–∞—Ä–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    print("üöÄ –ó–∞–ø—É—Å–∫ grandmaster –±–µ–Ω—á–º–∞—Ä–∫–∞...")
    import time
    for i in range(2):
        print(f"üéØ –†–µ—à–µ–Ω–∏–µ –ø–∞–∑–ª–∞ {i+1}/2...")
        time.sleep(1)
    print("‚úÖ Grandmaster –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")

def run_long_task(duration: int = 5):
    """–ü—Ä–∏–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    import time
    print(f"–ó–∞–ø—É—â–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
    for i in range(duration):
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{duration}...")
        time.sleep(1)
    print("–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"

def cause_an_error():
    """–§—É–Ω–∫—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É."""
    print("–°–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞...")
    result = 1 / 0
    return result

def echo_message(message: str, repeat: int = 1):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑."""
    print("–ö–æ–º–∞–Ω–¥–∞ 'echo' –≤—ã–∑–≤–∞–Ω–∞.")
    for i in range(repeat):
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i+1}: {message}")
    return f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ {repeat} —Ä–∞–∑."

def list_available_models():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")

    models_dir = "scripts/models"
    if os.path.exists(models_dir):
        models = [f for f in os.listdir(models_dir) if f.endswith('.py')]
        print(f"–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        for model in models:
            print(f"  - {model}")
    else:
        print("–ü–∞–ø–∫–∞ scripts/models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º results –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = "results/raw"
    if os.path.exists(results_dir):
        results = [f for f in os.listdir(results_dir) if f.endswith('.json')]
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
        for result in results[:5]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {result}")
        if len(results) > 5:
            print(f"  ... –∏ –µ—â–µ {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    return "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω"

def run_tests(test_ids=None, model_config=None, test_config=None):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

    if not test_ids:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ç–µ—Å—Ç—ã"

    if not model_config:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"

    print(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {', '.join(test_ids)}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_config.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    print(f"üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_config.get('provider', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞
    test_names = []
    for test_id in test_ids:
        if test_id.startswith('t') and test_id.endswith('.py'):
            test_names.append(test_id)
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ –∏–º—è —Ñ–∞–π–ª–∞
            test_names.append(f"{test_id}.py")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤
    test_base_names = [name.replace('.py', '') for name in test_names]
    os.environ['BC_TESTS_TO_RUN'] = json.dumps(test_base_names)

    print(f"üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤: {test_base_names}")
    print(f"üìÅ –ü–∞–ø–∫–∞ –ø–æ–∏—Å–∫–∞: baselogic/tests/")
    os.environ['BC_MODELS_0_NAME'] = model_config.get('model_name', '')
    os.environ['BC_MODELS_0_CLIENT_TYPE'] = model_config.get('provider', 'ollama')
    os.environ['BC_MODELS_0_API_BASE'] = model_config.get('api_base', 'http://localhost:11434/v1')
    os.environ['BC_MODELS_0_API_KEY'] = model_config.get('api_key', '')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    os.environ['BC_MODELS_0_GENERATION_TEMPERATURE'] = str(model_config.get('temperature', 0.7))
    os.environ['BC_MODELS_0_GENERATION_MAX_TOKENS'] = str(model_config.get('max_tokens', 1000))
    os.environ['BC_MODELS_0_GENERATION_TOP_P'] = str(model_config.get('top_p', 0.9))
    os.environ['BC_MODELS_0_GENERATION_NUM_CTX'] = str(model_config.get('num_ctx', 4096))
    os.environ['BC_MODELS_0_GENERATION_REPEAT_PENALTY'] = str(model_config.get('repeat_penalty', 1.1))
    os.environ['BC_MODELS_0_GENERATION_NUM_GPU'] = str(model_config.get('num_gpu', 1))
    os.environ['BC_MODELS_0_GENERATION_NUM_THREAD'] = str(model_config.get('num_thread', 6))
    os.environ['BC_MODELS_0_GENERATION_NUM_PARALLEL'] = str(model_config.get('num_parallel', 1))
    os.environ['BC_MODELS_0_GENERATION_LOW_VRAM'] = str(model_config.get('low_vram', False)).lower()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if 'query_timeout' in model_config:
        os.environ['BC_MODELS_0_OPTIONS_QUERY_TIMEOUT'] = str(model_config['query_timeout'])
    if 'stream' in model_config:
        os.environ['BC_MODELS_0_INFERENCE_STREAM'] = str(model_config['stream']).lower()
    if 'think' in model_config:
        os.environ['BC_MODELS_0_INFERENCE_THINK'] = str(model_config['think']).lower()
    if 'system_prompt' in model_config:
        os.environ['BC_MODELS_0_PROMPTING_SYSTEM_PROMPT'] = model_config['system_prompt']

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if test_config:
        if 'runs_per_test' in test_config:
            os.environ['BC_RUNS_PER_TEST'] = str(test_config['runs_per_test'])
        if 'show_payload' in test_config:
            os.environ['BC_SHOW_PAYLOAD'] = str(test_config['show_payload']).lower()
        if 'raw_save' in test_config:
            os.environ['BC_RUNS_RAW_SAVE'] = str(test_config['raw_save']).lower()

    print("‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("üèÉ –ó–∞–ø—É—Å–∫ baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º baselogic –±–µ–Ω—á–º–∞—Ä–∫
        from scripts.run_baselogic_benchmark import main as run_benchmark
        run_benchmark()
        print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}"

# –†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥
COMMAND_REGISTRY = {
    "run_baselogic": run_baselogic_benchmark,
    "run_grandmaster": run_grandmaster_benchmark,
    "run_tests": run_tests,
    "long_task": run_long_task,
    "error_task": cause_an_error,
    "echo": echo_message,
    "list_models": list_available_models,
}

# -----------------------------------------------------------------------------
# 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –ø–æ—Ç–æ–∫–∞—Ö
# -----------------------------------------------------------------------------
def run_command_in_thread(command: str, params: Dict[str, Any], loop: asyncio.AbstractEventLoop):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
    –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è –≤–µ—Å—å –µ–µ –≤—ã–≤–æ–¥ (stdout, stderr).
    """
    string_io = io.StringIO()
    try:
        if command in COMMAND_REGISTRY:
            target_func = COMMAND_REGISTRY[command]

            with redirect_stdout(string_io), redirect_stderr(string_io):
                result = target_func(**params)
                print(f"\n[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command}': {result}")
        else:
            print(f"[ERROR] –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ.", file=string_io)

    except Exception:
        print("\n[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:", file=string_io)
        traceback.print_exc(file=string_io)
    finally:
        output = string_io.getvalue()
        asyncio.run_coroutine_threadsafe(log_queue.put(output), loop)

# -----------------------------------------------------------------------------
# 5. FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -----------------------------------------------------------------------------
app = FastAPI(
    title="AI-Reasoning-Lab Web Interface (No Docker)",
    description="Web interface for AI-Reasoning-Lab benchmark system without Docker",
    version="0.1.0",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -----------------------------------------------------------------------------
# 6. WebSocket endpoints
# -----------------------------------------------------------------------------
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    await manager.connect(websocket)
    await manager.broadcast("[SYSTEM] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω.", msg_type="system")
    logger.info("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
    loop = asyncio.get_event_loop()

    try:
        while True:
            data = await websocket.receive_json()
            command = data.get("command")
            params = data.get("params", {})

            if command:
                await manager.broadcast(f"[COMMAND] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ '{command}' —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}", msg_type="system")

                thread = threading.Thread(target=run_command_in_thread, args=(command, params, loop))
                thread.start()
            else:
                await manager.broadcast("[ERROR] –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.", msg_type="error")

    except WebSocketDisconnect:
        logger.info("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è (WebSocketDisconnect)")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ WebSocket: {e}")
    finally:
        manager.disconnect(websocket)
        await manager.broadcast("[SYSTEM] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω.", msg_type="system")
        logger.info("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

# -----------------------------------------------------------------------------
# 7. HTTP endpoints
# -----------------------------------------------------------------------------
@app.get("/", response_class=HTMLResponse)
async def get_index():
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    try:
        static_dir = "static"
        index_path = os.path.join(static_dir, "index.html")
        if os.path.exists(index_path):
            with open(index_path, "r", encoding="utf-8") as f:
                return HTMLResponse(content=f.read(), status_code=200)
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return HTMLResponse(content=get_fallback_html(), status_code=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–¥–∞—á–µ index.html: {e}")
        return HTMLResponse(content="<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h1>", status_code=500)

@app.get("/api/commands")
async def get_available_commands():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    return {
        "commands": list(COMMAND_REGISTRY.keys()),
        "description": {
            "run_baselogic": "–ó–∞–ø—É—Å–∫ baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞",
            "run_grandmaster": "–ó–∞–ø—É—Å–∫ grandmaster –±–µ–Ω—á–º–∞—Ä–∫–∞",
            "long_task": "–ü—Ä–∏–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏",
            "error_task": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –æ—à–∏–±–∫–æ–π",
            "echo": "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "list_models": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"
        }
    }

@app.get("/api/models")
async def get_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"""
    try:
        models_dir = "scripts/models"
        if os.path.exists(models_dir):
            models = [f for f in os.listdir(models_dir) if f.endswith('.py')]
            return {"models": models}
        else:
            return {"models": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return {"models": [], "error": str(e)}

@app.post("/api/shutdown")
async def shutdown_server():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        await manager.broadcast("[SYSTEM] –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...", msg_type="system")

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        import asyncio
        await asyncio.sleep(1)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤
        import signal
        os.kill(os.getpid(), signal.SIGTERM)

        return {"message": "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è..."}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return {"error": str(e)}, 500

@app.get("/api/results")
async def get_results():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
    try:
        results_dir = "results/raw"
        if os.path.exists(results_dir):
            results = [f for f in os.listdir(results_dir) if f.endswith('.json')]
            return {"results": results}
        else:
            return {"results": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return {"results": [], "error": str(e)}

@app.get("/api/tests")
async def get_tests():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        tests_dir = "baselogic/tests"
        if os.path.exists(tests_dir):
            test_files = [f for f in os.listdir(tests_dir) if f.startswith('t') and f.endswith('.py')]
            tests = []
            for test_file in test_files:
                test_id = test_file.replace('.py', '')
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
                if 'logic' in test_file.lower():
                    category = 'Logic'
                elif 'code' in test_file.lower():
                    category = 'Code Generation'
                elif 'math' in test_file.lower():
                    category = 'Mathematics'
                elif 'data' in test_file.lower():
                    category = 'Data Extraction'
                elif 'summarization' in test_file.lower():
                    category = 'Summarization'
                elif 'accuracy' in test_file.lower():
                    category = 'Accuracy'
                elif 'verbosity' in test_file.lower():
                    category = 'Verbosity'
                elif 'positional' in test_file.lower():
                    category = 'Positional'
                elif 'support' in test_file.lower():
                    category = 'Support'
                elif 'text' in test_file.lower():
                    category = 'Text Classification'
                elif 'grandmaster' in test_file.lower():
                    category = 'Grandmaster'
                else:
                    category = 'Other'

                # –î–ª—è baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –±–∞–∑–æ–≤–æ–µ –∏–º—è –±–µ–∑ .py
                tests.append({
                    "id": test_id,  # –ë–∞–∑–æ–≤–æ–µ –∏–º—è –±–µ–∑ .py –¥–ª—è –ø–æ–∏—Å–∫–∞
                    "name": test_file.replace('.py', '').replace('_', ' ').title(),
                    "category": category,
                    "difficulty": "Medium",  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    "file": test_file  # –ü–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                })

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            tests.sort(key=lambda x: x['category'])
            return {"tests": tests}
        else:
            return {"tests": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        return {"tests": [], "error": str(e)}

@app.get("/api/providers")
async def get_providers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    providers = [
        {"id": "ollama", "name": "Ollama", "default_url": "http://localhost:11434"},
        {"id": "jan", "name": "Jan", "default_url": "http://127.0.0.1:1337/v1"},
        {"id": "lmstudio", "name": "LM Studio", "default_url": "http://127.0.0.1:1234/v1"},
        {"id": "openai_compatible", "name": "OpenAI Compatible", "default_url": "http://localhost:8000/v1"},
        {"id": "gemini", "name": "Gemini", "default_url": ""}
    ]
    return {"providers": providers}

@app.get("/api/settings")
async def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return {
        "log_to_console": log_to_console
    }

@app.post("/api/settings")
async def update_settings(settings: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    global log_to_console
    if "log_to_console" in settings:
        log_to_console = bool(settings["log_to_console"])
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ log_to_console –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {log_to_console}")

    return {"message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "settings": {"log_to_console": log_to_console}}

# -----------------------------------------------------------------------------
# 8. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
# -----------------------------------------------------------------------------
# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if os.path.exists("static"):
    app.mount("/", StaticFiles(directory="static", html=True), name="static")

# -----------------------------------------------------------------------------
# 9. –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# -----------------------------------------------------------------------------
async def broadcast_logs():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    while True:
        log_message = await log_queue.get()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_type = "error" if "Traceback" in log_message or "[ERROR]" in log_message else "log"

        # –í—ã–≤–æ–¥–∏–º –≤ Python –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if log_to_console:
            if msg_type == "error":
                print(f"\033[91m{log_message}\033[0m", end="")  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—à–∏–±–æ–∫
            elif msg_type == "system":
                print(f"\033[93m{log_message}\033[0m", end="")  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
            else:
                print(log_message, end="")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        if manager.active_connections:
            await manager.broadcast(log_message, msg_type=msg_type)

        log_queue.task_done()

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
    logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.create_task(broadcast_logs())
    logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

# -----------------------------------------------------------------------------
# 10. Fallback HTML –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
# -----------------------------------------------------------------------------
def get_fallback_html():
    """–ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI-Reasoning-Lab Web Console</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-900 text-gray-200 flex flex-col h-screen">
    <header class="bg-gray-800 p-4">
        <h1 class="text-2xl font-bold text-white">AI-Reasoning-Lab Web Console</h1>
        <p class="text-gray-400">–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥</p>
    </header>

    <main class="flex-1 flex flex-col md:flex-row p-4 gap-4">
        <aside class="md:w-1/3 bg-gray-800 rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4">–ö–æ–º–∞–Ω–¥—ã</h2>
            <div class="space-y-2">
                <button id="run-baselogic" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded">
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å Baselogic
                </button>
                <button id="run-grandmaster" class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded">
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å Grandmaster
                </button>
                <button id="long-task" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-4 rounded">
                    –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
                </button>
                <button id="list-models" class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded">
                    –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                </button>
                <button id="clear-log" class="w-full bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded">
                    –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å
                </button>
            </div>

            <h2 class="text-xl font-semibold mb-4 mt-6">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º</h2>
            <div class="space-y-2">
                <button id="shutdown-server" class="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded">
                    üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                </button>
            </div>
        </aside>

        <section class="flex-1 bg-black rounded-lg flex flex-col">
            <div class="bg-gray-800 px-4 py-2 text-sm font-semibold">
                –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
            </div>
            <div id="log-container" class="flex-1 p-4 overflow-y-auto font-mono text-sm">
                <!-- –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
            </div>
        </section>
    </main>

    <script>
        let socket;
        const logContainer = document.getElementById('log-container');

        function connect() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const host = window.location.host;
            const wsUrl = `${protocol}//${host}/ws`;

            console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${wsUrl}`);
            socket = new WebSocket(wsUrl);

            socket.onopen = () => {
                addLogMessage('[SYSTEM] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'system');
            };

            socket.onclose = () => {
                addLogMessage('[SYSTEM] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
                setTimeout(connect, 3000);
            };

            socket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                addLogMessage(message.content, message.type);
            };
        }

        function addLogMessage(content, type = 'log') {
            const pre = document.createElement('pre');
            pre.textContent = content;

            switch(type) {
                case 'error':
                    pre.className = 'text-red-400';
                    break;
                case 'system':
                    pre.className = 'text-yellow-400';
                    break;
                default:
                    pre.className = 'text-gray-300';
            }

            logContainer.appendChild(pre);
            logContainer.scrollTop = logContainer.scrollHeight;
        }

        function sendCommand(command, params = {}) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ command, params }));
            } else {
                addLogMessage('[SYSTEM] WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        document.getElementById('run-baselogic').addEventListener('click', () => {
            sendCommand('run_baselogic');
        });

        document.getElementById('run-grandmaster').addEventListener('click', () => {
            sendCommand('run_grandmaster');
        });

        document.getElementById('long-task').addEventListener('click', () => {
            sendCommand('long_task', { duration: 3 });
        });

        document.getElementById('list-models').addEventListener('click', () => {
            sendCommand('list_models');
        });

        document.getElementById('clear-log').addEventListener('click', () => {
            logContainer.innerHTML = '';
            addLogMessage('[SYSTEM] –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞', 'system');
        });

        document.getElementById('shutdown-server').addEventListener('click', () => {
            if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?')) {
                fetch('/api/shutdown', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        addLogMessage('[SYSTEM] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', 'system');
                        setTimeout(() => {
                            addLogMessage('[SYSTEM] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'error');
                        }, 2000);
                    })
                    .catch(error => {
                        addLogMessage('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ' + error, 'error');
                    });
            }
        });

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        connect();
    </script>
</body>
</html>
    """

# -----------------------------------------------------------------------------
# 12. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ AI-Reasoning-Lab Web Interface (No Docker)")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if not check_python_version():
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)

    # –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    kill_existing_server(8000)

    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for cmd, desc in {
        "run_baselogic": "–ó–∞–ø—É—Å–∫ baselogic –±–µ–Ω—á–º–∞—Ä–∫–∞",
        "run_grandmaster": "–ó–∞–ø—É—Å–∫ grandmaster –±–µ–Ω—á–º–∞—Ä–∫–∞",
        "run_tests": "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
        "long_task": "–ü—Ä–∏–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏",
        "error_task": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –æ—à–∏–±–∫–æ–π",
        "echo": "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "list_models": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"
    }.items():
        print(f"  {cmd}: {desc}")

    print("\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üìä API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/docs")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'Shutdown' –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")

    try:
        uvicorn.run(app, host="0.0.0.0", port=8000)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)