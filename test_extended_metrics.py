#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫.
"""

import sys
import os
from pathlib import Path
from unittest.mock import MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from baselogic.core.metrics import MetricsCollector
from baselogic.core.types import TestResult

def create_mock_test_result(category: str, is_correct: bool, verification_details: dict = None):
    """–°–æ–∑–¥–∞–µ—Ç mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
    return {
        'test_id': f"{category}_test_1",
        'category': category,
        'model_name': 'test_model',
        'model_details': {'size': '4B'},
        'prompt': 'Test prompt',
        'llm_response': 'Test response',
        'expected_output': 'expected',
        'is_correct': is_correct,
        'execution_time_ms': 100.0,
        'verification_details': verification_details or {}
    }

def test_extended_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
    collector = MetricsCollector("test_model")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º multi-hop reasoning –º–µ—Ç—Ä–∏–∫–∏
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ multi-hop reasoning –º–µ—Ç—Ä–∏–∫...")
    multi_hop_result = create_mock_test_result(
        't15_multi_hop_reasoning',
        True,
        {'chain_length': 7, 'chain_completeness': 0.85, 'total_score': 0.82}
    )
    collector.record_test_result(multi_hop_result)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º counterfactual reasoning –º–µ—Ç—Ä–∏–∫–∏
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ counterfactual reasoning –º–µ—Ç—Ä–∏–∫...")
    counterfactual_result = create_mock_test_result(
        't16_counterfactual_reasoning',
        True,
        {'total_score': 0.78, 'depth_score': 0.75}
    )
    collector.record_test_result(counterfactual_result)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º proof verification –º–µ—Ç—Ä–∏–∫–∏
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ proof verification –º–µ—Ç—Ä–∏–∫...")
    proof_result = create_mock_test_result(
        't17_proof_verification',
        False,
        {'error_type': 'division_by_zero', 'recognition_score': 0.6}
    )
    collector.record_test_result(proof_result)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º constrained optimization –º–µ—Ç—Ä–∏–∫–∏
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ constrained optimization –º–µ—Ç—Ä–∏–∫...")
    optimization_result = create_mock_test_result(
        't18_constrained_optimization',
        True,
        {'total_score': 0.88, 'constraint_score': 0.9}
    )
    collector.record_test_result(optimization_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìà –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, metrics in collector.category_metrics.items():
        print(f"\nüéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"   –¢–µ—Å—Ç—ã: {metrics['tests']}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {metrics['accuracy']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['avg_time_ms']:.1f}ms")

        # –í—ã–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if collector._is_extended_test_category(category):
            print("   üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            for key, value in metrics.items():
                if key not in ['tests', 'correct', 'accuracy', 'avg_time_ms']:
                    if isinstance(value, list):
                        print(f"      {key}: {value} (—Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π)")
                    else:
                        print(f"      {key}: {value:.3f}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫...")
    export_path = Path("test_metrics_export.json")
    success = collector.export_metrics(export_path)

    if success:
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_path}")

        # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        import json
        with open(export_path, 'r', encoding='utf-8') as f:
            exported_data = json.load(f)

        print("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        print(f"   –ú–æ–¥–µ–ª—å: {exported_data['model_name']}")
        print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {exported_data['overall_metrics']['accuracy']:.2f}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {exported_data['test_results_count']}")
        print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {exported_data.get('has_extended_metrics', False)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
        extended_found = False
        for category, metrics in exported_data['category_metrics'].items():
            if collector._is_extended_test_category(category):
                extended_keys = [k for k in metrics.keys() if k not in ['tests', 'correct', 'accuracy', 'avg_time_ms']]
                if extended_keys:
                    print(f"   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {category}: {extended_keys}")
                    extended_found = True

        if not extended_found:
            print("   ‚ö†Ô∏è  –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        export_path.unlink()
        print("üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω")

    else:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫")

    print("\nüéä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

def test_backward_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")

    collector = MetricsCollector("compatibility_test")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞
    old_test_result = create_mock_test_result('t01_simple_logic', True)
    collector.record_test_result(old_test_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    old_metrics = collector.category_metrics.get('t01_simple_logic', {})
    required_keys = ['tests', 'correct', 'accuracy', 'avg_time_ms']

    missing_keys = [key for key in required_keys if key not in old_metrics]
    if missing_keys:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {missing_keys}")
        return False

    print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    extended_ok = test_extended_metrics()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    compatibility_ok = test_backward_compatibility()

    if extended_ok and compatibility_ok:
        print("\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üìù –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(0)
    else:
        print("\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sys.exit(1)