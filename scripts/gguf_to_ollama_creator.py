import os
import re
import subprocess
import tempfile
from pathlib import Path
from typing import Optional, Dict, Any

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

def create_ollama_model(
        gguf_path: str,
        model_name: Optional[str] = None,
        template: Optional[str] = None,
        parameters: Optional[Dict[str, Any]] = None,
        system_message: Optional[str] = None,
        auto_name_strategy: str = "smart"  # "simple", "smart", "folder"
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ Ollama –∏–∑ GGUF —Ñ–∞–π–ª–∞.

    Args:
        gguf_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .gguf
        model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –≤ Ollama (–µ—Å–ª–∏ None - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        template: –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parameters: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ (temperature, top_p, etc.)
        system_message: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        auto_name_strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
                          - "simple": –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                          - "smart": —É–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–µ–∑ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
                          - "folder": –∏–º—è –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–∏

    Returns:
        –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã ollama create
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ GGUF —Ñ–∞–π–ª—É
    gguf_path_obj = Path(gguf_path).resolve()

    if not gguf_path_obj.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {gguf_path_obj} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if gguf_path_obj.suffix.lower() != ".gguf":
        raise ValueError(f"–§–∞–π–ª {gguf_path_obj} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è .gguf —Ñ–∞–π–ª–æ–º")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if model_name is None:
        model_name = _extract_model_name_from_path(gguf_path_obj, auto_name_strategy)
        print(f"[INFO] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–º—è –º–æ–¥–µ–ª–∏: '{model_name}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ollama
    try:
        subprocess.run(["ollama", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        raise RuntimeError("Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ollama –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ PATH")

    print(f"[INFO] –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å '{model_name}' –∏–∑ {gguf_path_obj}")

    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Modelfile
    modelfile_content = _create_modelfile_content(
        gguf_path_obj,
        template,
        parameters,
        system_message
    )

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Modelfile
    with tempfile.NamedTemporaryFile(mode='w', suffix='_Modelfile', delete=False) as f:
        f.write(modelfile_content)
        modelfile_path = f.name

    try:
        print(f"[INFO] –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π Modelfile: {modelfile_path}")
        print(f"[INFO] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Modelfile:\n{modelfile_content}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ollama create
        result = subprocess.run(
            ["ollama", "create", model_name, "-f", modelfile_path],
            check=True,
            capture_output=True,
            text=True,
            timeout=300
        )

        print(f"[SUCCESS] –ú–æ–¥–µ–ª—å '{model_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        if result.stdout.strip():
            print(f"[OUTPUT] {result.stdout}")

        return result.stdout

    except subprocess.TimeoutExpired:
        raise RuntimeError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (5 –º–∏–Ω—É—Ç)")
    except subprocess.CalledProcessError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e.stderr}"
        print(f"[ERROR] {error_msg}")
        raise RuntimeError(error_msg)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            Path(modelfile_path).unlink()
            print(f"[INFO] –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π Modelfile: {modelfile_path}")
        except Exception as e:
            print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {modelfile_path}: {e}")

def _extract_model_name_from_path(gguf_path: Path, strategy: str = "smart") -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É.

    Args:
        gguf_path: –ü—É—Ç—å –∫ GGUF —Ñ–∞–π–ª—É
        strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏

    Returns:
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
    """
    if strategy == "simple":
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        return gguf_path.stem

    elif strategy == "folder":
        # –ò–º—è –ø–∞–ø–∫–∏ —Å –º–æ–¥–µ–ª—å—é (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–ø–∫–∞ –≤ –ø—É—Ç–∏)
        parts = gguf_path.parts
        if len(parts) >= 2:
            folder_name = parts[-2]  # –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–ø–∫–∞
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "-GGUF", "-text-GGUF"
            clean_name = re.sub(r'-?(text-)?GGUF$', '', folder_name, flags=re.IGNORECASE)
            return clean_name.lower()
        else:
            return gguf_path.stem

    elif strategy == "smart":
        # –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        filename = gguf_path.stem

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ (Q4_0, Q8_0, f16, etc.)
        quantization_patterns = [
            r'-?Q\d+(_[KM0])?$',  # Q4_0, Q8_0, Q4_K_M, etc.
            r'-?f16$',            # f16
            r'-?f32$',            # f32
            r'-?bf16$',           # bf16
            r'-?fp16$',           # fp16
            r'-?int8$',           # int8
            r'-?int4$',           # int4
        ]

        clean_name = filename
        for pattern in quantization_patterns:
            clean_name = re.sub(pattern, '', clean_name, flags=re.IGNORECASE)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_name = re.sub(r'-+$', '', clean_name)  # —É–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        clean_name = clean_name.lower()

        return clean_name if clean_name else filename.lower()

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        return gguf_path.stem

def _create_modelfile_content(
        gguf_path: Path,
        template: Optional[str] = None,
        parameters: Optional[Dict[str, Any]] = None,
        system_message: Optional[str] = None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Modelfile.
    """
    content = f'FROM "{gguf_path}"\n\n'

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if system_message:
        content += f'SYSTEM """{system_message}"""\n\n'

    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    if template:
        content += f'TEMPLATE """{template}"""\n\n'

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if parameters:
        for param, value in parameters.items():
            if isinstance(value, str):
                content += f'PARAMETER {param} "{value}"\n'
            else:
                content += f'PARAMETER {param} {value}\n'
        content += '\n'

    return content.strip()

def list_ollama_models() -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ Ollama."""
    try:
        result = subprocess.run(
            ["ollama", "list"],
            check=True,
            capture_output=True,
            text=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e.stderr}")
    except FileNotFoundError:
        raise RuntimeError("Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# ------------------------------
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ------------------------------
if __name__ == "__main__":
    # –ß–∏—Ç–∞–µ–º –ø—É—Ç—å –∫ GGUF —Ñ–∞–π–ª—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    gguf_file = os.getenv("GGUF_MODEL_PATH")

    if not gguf_file:
        raise ValueError("–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GGUF_MODEL_PATH –∑–∞–¥–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ.")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
    path_obj = Path(gguf_file)

    print("–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏:")
    print(f"üìÅ –ü—É—Ç—å: {gguf_file}")
    print(f"  ‚Ä¢ simple:  {_extract_model_name_from_path(path_obj, 'simple')}")
    print(f"  ‚Ä¢ smart:   {_extract_model_name_from_path(path_obj, 'smart')}")
    print(f"  ‚Ä¢ folder:  {_extract_model_name_from_path(path_obj, 'folder')}")
    print()

    model_parameters = {
        "temperature": 0.7,
        "top_p": 0.9,
        "top_k": 40,
    }

    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Å–æ smart —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–º–µ–Ω–µ–º (smart):")
        output = create_ollama_model(
            gguf_path=gguf_file,
            model_name=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            auto_name_strategy="smart",
            parameters=model_parameters,
            system_message="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
        )

        print("\n" + "="*50)
        print("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ Ollama:")
        print(list_ollama_models())

    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] {e}")

    # –î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã:

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–∞–ø–∫–∏
    # create_ollama_model(gguf_path=gguf_file, auto_name_strategy="folder")

    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    # create_ollama_model(gguf_path=gguf_file, auto_name_strategy="simple")
