#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤:
  ‚Ä¢ BASE_LOGIC_BENCHMARK_REPORT.md ‚Äî –æ–±—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–æ–¥–µ–ª–µ–π
  ‚Ä¢ JUDGE_LEADERBOARD.md          ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ LLM-—Å—É–¥–µ–π
"""

import sys
import argparse
from pathlib import Path

from baselogic.core.logger import setup_logging

# --- –ü—É—Ç–∏ –∏ –∏–º–ø–æ—Ä—Ç—ã ----------------------------------------------------------
project_root = Path(__file__).resolve().parent.parent
sys.path.append(str(project_root))         # –Ω–∞–¥—ë–∂–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã

from baselogic.core.reporter import Reporter, log          # –æ—Å–Ω–æ–≤–Ω–æ–π Reporter
from baselogic.core.judge_reporter import JudgeReporter     # —Å–ø–µ—Ü-—Ä–µ–ø–æ—Ä—Ç—ë—Ä

# -----------------------------------------------------------------------------


def main() -> None:
    """CLI-—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    setup_logging()

    # --- CLI –∞—Ä–≥—É–º–µ–Ω—Ç—ã -------------------------------------------------------
    parser = argparse.ArgumentParser(
        description="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-o",
        "--output-file",
        default="BASE_LOGIC_BENCHMARK_REPORT.md",
        help="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ (–≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è).",
    )
    parser.add_argument(
        "--judge-file",
        default="JUDGE_LEADERBOARD.md",
        help="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ LLM-—Å—É–¥–µ–π (–≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è).",
    )
    args = parser.parse_args()

    log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤‚Ä¶")

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---------------------------------------------------
    results_dir = project_root / "results" / "raw"
    if not results_dir.exists():
        log.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", results_dir)
        sys.exit(1)

    reporter = Reporter(results_dir=results_dir)
    judge_reporter = JudgeReporter(results_dir)

    if reporter.all_results.empty:
        log.warning("‚ö†Ô∏è  –í '%s' –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö JSON-—Ñ–∞–π–ª–æ–≤ ‚Äî –æ—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.", results_dir)
        return

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---------------------------------------------
    try:
        # 1) –û–±—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        log.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥‚Ä¶")
        leaderboard_md = reporter.generate_leaderboard_report()

        leaderboard_path = project_root / args.output_file
        leaderboard_path.write_text(leaderboard_md, encoding="utf-8")
        log.info("‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: %s (%d —Å–∏–º–≤–æ–ª–æ–≤)", leaderboard_path, len(leaderboard_md))

        # 2) –†–µ–π—Ç–∏–Ω–≥ —Å—É–¥–µ–π
        log.info("‚öñÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ LLM-—Å—É–¥–µ–π‚Ä¶")
        judge_md = judge_reporter.generate_judge_leaderboard()

        judge_path = project_root / args.judge_file
        judge_path.write_text(judge_md, encoding="utf-8")
        log.info("‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: %s (%d —Å–∏–º–≤–æ–ª–æ–≤)", judge_path, len(judge_md))

        log.info("üéâ –û—Ç—á—ë—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    except Exception as exc:  # pylint: disable=broad-except
        log.critical("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤: %s", exc, exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
