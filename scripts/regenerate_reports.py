# /scripts/regenerate_reports.py

import sys
import argparse
from pathlib import Path

from baselogic.core.logger import setup_logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Reporter
from baselogic.core.reporter import Reporter

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–¥–∏–Ω–æ–≥–æ, –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JSON-—Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å —É—á–µ—Ç–æ–º —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏.
    """

    setup_logging()
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    # –ê—Ä–≥—É–º–µ–Ω—Ç --ct –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –£–∏–ª—Å–æ–Ω–∞
    parser.add_argument(
        '--output-file', '-o',
        type=str,
        default="BASE_LOGIC_BENCHMARK_REPORT.md",
        help="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."
    )
    args = parser.parse_args()

    log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reporter
    # –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ .json —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ raw
    results_dir = project_root / "results" / "raw"
    reporter = Reporter(results_dir=results_dir)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    if reporter.all_results.empty:
        log.warning("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏. –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", results_dir)
        return

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    try:
        log.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏...")

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –í—Å—è –ª–æ–≥–∏–∫–∞, –≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—Ç—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π,
        # –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ Reporter.
        report_content = reporter.generate_leaderboard_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        report_file = project_root / args.output_file
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)

        log.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s", report_file)
        log.info("   –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ 'results/history.json' —Ç–∞–∫–∂–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

    except Exception as e:
        log.critical("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e, exc_info=True)
        sys.exit(1)

    log.info("\nüéâ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()