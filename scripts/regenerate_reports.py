# /scripts/regenerate_reports.py

import sys
from pathlib import Path
import argparse
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à Reporter
from baselogic.core.reporter import Reporter

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JSON-—Ñ–∞–π–ª–æ–≤.
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ --help
    )
    parser.add_argument(
        '--aw', '--accuracy-weight',
        type=float,
        default=0.7,
        help="–í–µ—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ (accuracy) –≤ –∏—Ç–æ–≥–æ–≤–æ–º –±–∞–ª–ª–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤."
    )
    parser.add_argument(
        '--sw', '--speed-weight',
        type=float,
        default=0.3,
        help="–í–µ—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ (speed) –≤ –∏—Ç–æ–≥–æ–≤–æ–º –±–∞–ª–ª–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤."
    )
    parser.add_argument(
        '--ct', '--confidence-threshold',
        type=int,
        default=10,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –¥–æ–≤–µ—Ä–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É."
    )
    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º–∞ –≤–µ—Å–æ–≤ —Ä–∞–≤–Ω–∞ 1
    if not (0.999 < args.aw + args.sw < 1.001):
        print(f"–û—à–∏–±–∫–∞: –°—É–º–º–∞ –≤–µ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 1.0, –∞ —É –≤–∞—Å: {args.aw + args.sw}")
        sys.exit(1)


    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–µ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: –¢–æ—á–Ω–æ—Å—Ç—å={args.aw}, –°–∫–æ—Ä–æ—Å—Ç—å={args.sw}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä–æ–≥ –¥–æ–≤–µ—Ä–∏—è: {args.ct} –∑–∞–ø—É—Å–∫–æ–≤")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reporter
    results_dir = project_root / "results" / "raw"
    reporter = Reporter(results_dir=results_dir)

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    try:
        print("\n[1/2] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report_content = reporter.generate_markdown_report()
        report_path = project_root / "results" / "reports"
        report_path.mkdir(exist_ok=True)
        report_file = report_path / f"report_regenerated_{time.strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        print("\n[2/2] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...")
        leaderboard_content = reporter.generate_advanced_leaderboard( )
        leaderboard_file = project_root / "LEADERBOARD.md"
        with open(leaderboard_file, 'w', encoding='utf-8') as f:
            f.write(leaderboard_content)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {leaderboard_file}")

    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

    print("\nüéâ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
