import yaml
from pathlib import Path
import sys
import logging
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–µ—Ä–∞
from baselogic.core.logger import setup_llm_logger

def setup_main_logger():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (—É—Ä–æ–≤–µ–Ω—å INFO –∏ –≤—ã—à–µ).
    """
    # –ú—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–µ—Ä. –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ª–æ–≥–µ—Ä—ã.
    log = logging.getLogger()

    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –µ—Å—Ç—å (–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏), –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –∏—Ö.
    if any(isinstance(h, logging.StreamHandler) for h in log.handlers):
        return

    log.setLevel(logging.INFO) # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)-8s - %(message)s'
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(console_formatter)

    log.addHandler(console_handler)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM "–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å".
    """
    # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–∞ –ª–æ–≥–µ—Ä–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ª–æ–≥–µ—Ä—ã.
    setup_main_logger()
    setup_llm_logger()

    # 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TestRunner –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–µ—Ä–æ–≤.
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥—É–ª—å test_runner –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π –ª–æ–≥–µ—Ä.
    from baselogic.core.test_runner import TestRunner

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã '–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å'...")

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = project_root / "config.yaml"
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º %s —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
        logging.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", config.get('models_to_test', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))
        logging.info("   - –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: %s", config.get('tests_to_run', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
    except FileNotFoundError:
        logging.error("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: %s", config_path)
        return
    except Exception as e:
        logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å config.yaml: %s", e, exc_info=True)
        return

    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Test Runner'–∞
    logging.info("[–≠–¢–ê–ü 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]")
    runner = TestRunner(config)
    runner.run()

    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    logging.info("[–≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞]")
    try:
        from baselogic.core.reporter import Reporter

        results_dir = project_root / "results" / "raw"
        reporter = Reporter(results_dir=results_dir)

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
        report_content = reporter.generate_markdown_report()
        report_path = project_root / "results" / "reports"
        report_path.mkdir(exist_ok=True)
        report_file = report_path / f"report_{time.strftime('%Y%m%d_%H%M%S')}.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        logging.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s", report_file)

        leaderboard_content = reporter.generate_advanced_leaderboard()
        leaderboard_file = project_root / "LEADERBOARD.md" # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        with open(leaderboard_file, 'w', encoding='utf-8') as f:
            f.write(leaderboard_content)
        logging.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s", leaderboard_file)
    except Exception as e:
        logging.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e, exc_info=True)


    logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()