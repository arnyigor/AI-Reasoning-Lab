import json

import yaml
from pathlib import Path
import sys
import logging
import time

from baselogic.core.config_loader import EnvConfigLoader

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–µ—Ä–∞
from baselogic.core.logger import setup_llm_logger

def setup_main_logger():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (—É—Ä–æ–≤–µ–Ω—å INFO –∏ –≤—ã—à–µ).
    """
    log = logging.getLogger()
    if any(isinstance(h, logging.StreamHandler) for h in log.handlers):
        return
    log.setLevel(logging.INFO)
    console_formatter = logging.Formatter('%(asctime)s - %(levelname)-8s - %(message)s')
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(console_formatter)
    log.addHandler(console_handler)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM "–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å".
    """
    setup_main_logger()
    setup_llm_logger()

    from baselogic.core.test_runner import TestRunner

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã '–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å'...")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

    # ==========================================================
    #  –ù–û–í–´–ô –ë–õ–û–ö (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    # ==========================================================
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        # –ü—Ä–µ—Ñ–∏–∫—Å 'BC' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ .env —Ñ–∞–π–ª–µ
        config_loader = EnvConfigLoader(prefix="BC")

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = config_loader.load_config()

        # 3. (–õ—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not config.get("models_to_test") or not config.get("tests_to_run"):
            raise ValueError(
                "–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'models_to_test' –∏–ª–∏ 'tests_to_run' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BC_MODELS_0_NAME, BC_TESTS_TO_RUN)."
            )

        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        # –£–ª—É—á—à–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–≤–µ–¥–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        model_names = [model.get('name', 'N/A') for model in config['models_to_test']]
        logging.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", model_names)
        logging.info("   - –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: %s", config.get('tests_to_run'))

    except Exception as e:
        logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", e, exc_info=True)
        return

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Test Runner'–∞ ---
    # (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    logging.info("[–≠–¢–ê–ü 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]")
    runner = TestRunner(config)
    runner.run()


    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    logging.info("[–≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞]")
    try:
        from baselogic.core.reporter import Reporter

        results_dir = project_root / "results" / "raw"
        reporter = Reporter(results_dir=results_dir)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        if reporter.all_results.empty:
            logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º –û–î–ò–ù –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –æ—Ç—á–µ—Ç
        # Confidence Threshold –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.yaml, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        report_content = reporter.generate_leaderboard_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª LEADERBOARD.md –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        report_file = project_root / "BASE_LOGIC_BENCHMARK_REPORT.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)

        logging.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω/—Å–æ–∑–¥–∞–Ω: %s", report_file)

    except Exception as e:
        logging.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e, exc_info=True)


    logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()