import logging
import sys
from pathlib import Path

from dotenv import load_dotenv

from baselogic.core.config_loader import EnvConfigLoader
from baselogic.core.logger import setup_logging
from baselogic.core.test_runner import TestRunner

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–µ—Ä–∞


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM "–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å".
    """
    import argparse

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

    # ==========================================================
    #  –ù–û–í–´–ô –ë–õ–û–ö (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    # ==========================================================
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        # –ü—Ä–µ—Ñ–∏–∫—Å 'BC' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ .env —Ñ–∞–π–ª–µ
        # >>>>> –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –Ø–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env <<<<<

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
        dotenv_path = project_root / ".env"

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫—É
        # 'utf-8-sig' - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å BOM
        if dotenv_path.exists():
            load_dotenv(dotenv_path=dotenv_path, encoding='utf-8-sig')
            print(f"INFO: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ {dotenv_path} –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            print("WARNING: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        config_loader = EnvConfigLoader(prefix="BC")
        config = config_loader.load_config()

        # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –í–ï–°–¨ –∫–æ–Ω—Ñ–∏–≥ <<<<<
        setup_logging(config)
        log = logging.getLogger(__name__)  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã '–ë–∞–∑–æ–≤—ã–π –ö–æ–Ω—Ç—Ä–æ–ª—å'...")
        log.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", config.get('models_to_test', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))
        log.info("   - –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: %s", config.get('tests_to_run', '–Ω–µ —É–∫–∞–∑–∞–Ω'))

        # 3. (–õ—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not config.get("models_to_test") or not config.get("tests_to_run"):
            raise ValueError(
                "–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'models_to_test' –∏–ª–∏ 'tests_to_run' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BC_MODELS_0_NAME, BC_TESTS_TO_RUN)."
            )

        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.%s", config)

        # –£–ª—É—á—à–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–≤–µ–¥–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        model_names = [model.get('name', 'N/A') for model in config['models_to_test']]
        logging.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", model_names)
        logging.info("   - –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤: %s", config.get('tests_to_run'))

    except Exception as e:
        logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", e,
                         exc_info=True)
        return

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Test Runner'–∞ ---
    # (–≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    logging.info("[–≠–¢–ê–ü 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]")
    runner = TestRunner(config)
    runner.run()

    if config.get("runs_raw_save"):
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        logging.info("[–≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞]")
        try:
            from baselogic.core.reporter import Reporter
            from baselogic.core.judge_reporter import JudgeReporter  # –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª

            results_dir = project_root / "results" / "raw"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not results_dir.exists():
                logging.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {results_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            reporter = Reporter(results_dir=results_dir)
            judge_reporter = JudgeReporter(results_dir)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            if reporter.all_results.empty:
                logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                report_content = reporter.generate_leaderboard_report()
                report_file = project_root / "BASE_LOGIC_BENCHMARK_REPORT.md"

                if report_content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    with open(report_file, 'w', encoding='utf-8') as f:
                        f.write(report_content)
                    logging.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: %s", report_file)
                else:
                    logging.warning("–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –ø—É—Å—Ç–æ–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å—É–¥–µ–π
            if judge_reporter.judge_results.empty:
                logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å—É–¥–µ–π")
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                judge_leaderboard = "# üèõÔ∏è –†–µ–π—Ç–∏–Ω–≥ LLM-–°—É–¥–µ–π\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—É–¥–µ–π."
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—É–¥–µ–π
                judge_leaderboard = judge_reporter.generate_judge_leaderboard()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å—É–¥–µ–π
            judge_report_file = project_root / "JUDGE_LEADERBOARD.md"

            if judge_leaderboard:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                with open(judge_report_file, "w", encoding="utf-8") as f:
                    f.write(judge_leaderboard)
                logging.info("‚úÖ –û—Ç—á–µ—Ç —Å—É–¥–µ–π —Å–æ–∑–¥–∞–Ω: %s (—Ä–∞–∑–º–µ—Ä: %d —Å–∏–º–≤–æ–ª–æ–≤)",
                             judge_report_file, len(judge_leaderboard))
            else:
                logging.warning("–û—Ç—á–µ—Ç —Å—É–¥–µ–π –ø—É—Å—Ç–æ–π")

        except ImportError as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: %s", e)
        except Exception as e:
            logging.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e, exc_info=True)

    logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()
