import logging
import sys
import json
from pathlib import Path
from typing import Dict, Any, List, Optional

from dotenv import load_dotenv

from baselogic.core.config_loader import EnvConfigLoader
from baselogic.core.logger import setup_logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ backend –≤ sys.path –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))
sys.path.append(str(project_root / "web" / "backend"))


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grandmaster –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫.
    """

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

    try:
        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        dotenv_path = project_root / ".env"

        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫—É
        if dotenv_path.exists():
            load_dotenv(dotenv_path=dotenv_path, encoding='utf-8-sig')
            print(f"INFO: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ {dotenv_path} –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            print("WARNING: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        config_loader = EnvConfigLoader(prefix="BC")
        config = config_loader.load_config()

        # >>>>> –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –í–ï–°–¨ –∫–æ–Ω—Ñ–∏–≥ <<<<<
        setup_logging(config)
        log = logging.getLogger(__name__)

        log.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grandmaster –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫...")
        log.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", config.get('models_to_test', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))
        log.info("   - –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", config.get('tests_to_run', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not config.get("models_to_test") or not config.get("tests_to_run"):
            raise ValueError(
                "–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'models_to_test' –∏–ª–∏ 'tests_to_run' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BC_MODELS_0_NAME, BC_TESTS_TO_RUN)."
            )

        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.%s", config)

        # –£–ª—É—á—à–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–≤–µ–¥–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        model_names = [model.get('name', 'N/A') for model in config['models_to_test']]
        logging.info("   - –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", model_names)
        logging.info("   - –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s", config.get('tests_to_run'))

    except Exception as e:
        logging.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", e,
                         exc_info=True)
        return

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ ---
    logging.info("[–≠–¢–ê–ü 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grandmaster]")

    try:
        grandmaster_tester = GrandmasterTester(config)
        grandmaster_tester.run()
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Grandmaster: %s", e, exc_info=True)
        return

    logging.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Grandmaster –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


class GrandmasterTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Grandmaster –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.project_root = Path(__file__).parent.parent
        self.puzzles_path = self.project_root / "grandmaster" / "puzzles"
        self.results_path = self.project_root / "results" / "raw"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.results_path.mkdir(parents=True, exist_ok=True)

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫"""
        test_ids = self.config.get('tests_to_run', [])
        models = self.config.get('models_to_test', [])

        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_ids)} –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ –Ω–∞ {len(models)} –º–æ–¥–µ–ª—è—Ö")

        for test_id in test_ids:
            logging.info(f"üß© –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É: {test_id}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
            puzzle_data = self._load_puzzle(test_id)
            if not puzzle_data:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É {test_id}")
                continue

            for model_config in models:
                try:
                    logging.info(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {model_config['name']} –Ω–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–µ {test_id}")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
                    result = self._run_puzzle_test(puzzle_data, model_config)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self._save_result(test_id, model_config['name'], result)

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {model_config['name']} –Ω–∞ {test_id}: {e}")
                    continue

    def _load_puzzle(self, test_id: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ test_id (grandmaster_4x4 -> 4x4.txt)
        if test_id.startswith("grandmaster_"):
            filename = test_id.replace("grandmaster_", "") + ".txt"
        else:
            filename = test_id + ".txt"

        puzzle_file = self.puzzles_path / filename

        if not puzzle_file.exists():
            logging.error(f"–§–∞–π–ª –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {puzzle_file}")
            return None

        try:
            with open(puzzle_file, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            return self._parse_puzzle_content(content)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ {puzzle_file}: {e}")
            return None

    def _parse_puzzle_content(self, content: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"""
        lines = content.strip().split('\n')

        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator_index = -1
        for i, line in enumerate(lines):
            if '=' * 10 in line:
                separator_index = i
                break

        if separator_index == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Ñ–∞–π–ª–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏")

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —É—Å–ª–æ–≤–∏—è –∏ –≤–æ–ø—Ä–æ—Å
        conditions_part = '\n'.join(lines[:separator_index])
        question_part = '\n'.join(lines[separator_index + 1:])

        return {
            'conditions': conditions_part,
            'question': question_part,
            'full_text': content
        }

    def _run_puzzle_test(self, puzzle_data: Dict[str, Any], model_config: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É

        logging.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –º–æ–¥–µ–ª–∏...")

        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤)
        mock_response = "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞

        return {
            'model_response': mock_response,
            'timestamp': '2025-09-02T09:51:41.723Z',
            'status': 'completed',
            'puzzle_conditions': puzzle_data['conditions'],
            'puzzle_question': puzzle_data['question']
        }

    def _save_result(self, test_id: str, model_name: str, result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import time
        timestamp = time.strftime("%Y%m%d_%H%M%S")

        filename = f"{model_name}_{test_id}_{timestamp}.json"
        result_file = self.results_path / filename

        try:
            with open(result_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)

            logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_file}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {result_file}: {e}")


if __name__ == "__main__":
    main()