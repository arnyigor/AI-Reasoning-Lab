# main.py
import pandas as pd

from CoreGenerator import CorePuzzleGenerator
from EinsteinPuzzle import EinsteinPuzzleDefinition

if __name__ == '__main__':
    # Настройка Pandas для полного вывода больших таблиц
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    # Общие данные для всех "Загадок Эйнштейна"
    EINSTEIN_THEMES = {
        "Тайна в Школе на Холме": {
            "Ученик": ["Виктория", "Даниил", "Никита", "Алексей", "София", "Матвей", "Анна", "Игорь", "Ольга", "Павел"],
            "Предмет": ["Алгебра", "Биология", "География", "История", "Музыка", "ИЗО", "Химия", "Физика", "Литература", "Информатика"],
            "Кружок": ["Шахматы", "Дебаты", "Театральный", "Фотография", "Астрономия", "Робототехника", "Журналистика", "Волонтерство", "Оркестр", "Спортклуб"],
            "Обед": ["Пицца", "Суп", "Салат", "Сэндвич", "Котлета", "Запеканка", "Плов", "Макароны", "Бургер", "Роллы"],
            "Хобби": ["Чтение", "Видеоигры", "Рисование", "Спорт", "Музыка", "Программирование", "Коллекционирование", "Танцы", "Готовка", "Путешествия"],
            "Любимый фильм": ["Драма", "Комедия", "Боевик", "Фантастика", "Триллер", "Детектив", "Мультфильм", "Документальный", "Хоррор", "Фэнтези"],
            "Место в библиотеке": ["У окна", "В углу", "За круглым столом", "На 2-м этаже", "В архиве", "У стеллажа 'А'", "Возле входа", "В читальном зале", "На пуфике", "За компьютером"],
            "Домашнее животное": ["Кошка", "Собака", "Попугай", "Хомяк", "Рыбки", "Черепаха", "Кролик", "Морская свинка", "Игуана", "Паук"],
            "Цвет рюкзака": ["Красный", "Синий", "Зеленый", "Черный", "Желтый", "Фиолетовый", "Оранжевый", "Серый", "Белый", "Розовый"],
            "Мечта": ["Стать врачом", "Полететь в космос", "Написать книгу", "Создать игру", "Выиграть олимпиаду", "Стать актером", "Открыть бизнес", "Спасти мир", "Изобрести что-то", "Объехать мир"]
        },
        "Офисная Тайна": {
            "Сотрудник": ["Иванов", "Петров", "Смирнов", "Кузнецов", "Волков", "Соколов", "Лебедев"],
            "Отдел": ["Финансы", "Маркетинг", "IT", "HR", "Продажи", "Логистика", "Аналитика"],
            "Проект": ["Альфа", "Омега", "Квант", "Зенит", "Титан", "Орион", "Спектр"],
            "Напиток": ["Кофе", "Зеленый чай", "Черный чай", "Вода", "Латте", "Капучино", "Эспрессо"]
        },
        "Космическая Одиссея": {
            "Капитан": ["Рейнольдс", "Шепард", "Адама", "Старбак", "Пикар", "Соло", "Акбар"],
            "Корабль": ["Серенити", "Нормандия", "Галактика", "Звёздный Крейсер", "Энтерпрайз", "Сокол", "Прометей"],
            "Сектор": ["Орион", "Андромеда", "Плеяды", "Центавра", "Гидра", "Войд", "Квазар"],
            "Аномалия": ["Червоточина", "Грави-колодец", "Темпоральный сдвиг", "Нейтронная буря", "Пси-поле", "Ксено-артефакт", "Сингулярность"]
        }
    }
    EINSTEIN_STORY_ELEMENTS = {
        "scenario": "",
        "position": "локация"
    }


    # --- ГЕНЕРАЦИЯ МАСШТАБНОЙ ЗАДАЧИ ---
    print("\n\n--- ГЕНЕРАЦИЯ МАСШТАБНОЙ ЗАДАЧИ ---")

    # Выбираем тему, с которой будем работать
    target_theme_name = "Тайна в Школе на Холме"
    target_theme = EINSTEIN_THEMES[target_theme_name]

    # Динамически определяем максимальные размеры
    max_possible_items = min(len(v) for v in target_theme.values())
    max_possible_categories = len(target_theme)

    # Задаем желаемые параметры для головоломки
    # Например, мы хотим головоломку 7x5
    desired_num_items = 8
    desired_num_categories = 8

    # Проверяем, что наши желания выполнимы
    if desired_num_items > max_possible_items:
        raise ValueError(f"Невозможно создать головоломку {desired_num_items}x{desired_num_categories}: в темах недостаточно элементов (максимум {max_possible_items}).")
    if desired_num_categories > max_possible_categories:
        raise ValueError(f"Невозможно создать головоломку {desired_num_items}x{desired_num_categories}: в теме '{target_theme_name}' всего {max_possible_categories} категорий.")


    einstein_def_large = EinsteinPuzzleDefinition(themes={target_theme_name: target_theme}, # Передаем только одну, выбранную тему
                                                  story_elements=EINSTEIN_STORY_ELEMENTS,
                                                  num_items=desired_num_items,
                                                  num_categories=desired_num_categories,
                                                  is_circular=False)
    core_gen_large = CorePuzzleGenerator(puzzle_definition=einstein_def_large)
    core_gen_large.generate()