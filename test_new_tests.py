#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ AI-Reasoning-Lab.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from baselogic.core.test_runner import TestRunner
from baselogic.core.config_loader import EnvConfigLoader

def test_new_tests_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ AI-Reasoning-Lab")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config = {
        'tests_to_run': [
            't15_multi_hop_reasoning',
            't16_counterfactual_reasoning',
            't17_proof_verification',
            't18_constrained_optimization'
        ],
        'runs_per_test': 1,
        'models_to_test': []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    }

    try:
        # –°–æ–∑–¥–∞–µ–º TestRunner —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ TestRunner...")
        test_runner = TestRunner(test_config)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
        generators = test_runner.test_generators

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤: {len(generators)}")
        print("üìã –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
        for test_name in sorted(generators.keys()):
            print(f"   - {test_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
        new_tests = ['t15_multi_hop_reasoning', 't16_counterfactual_reasoning',
                    't17_proof_verification', 't18_constrained_optimization']

        missing_tests = []
        for test_name in new_tests:
            if test_name not in generators:
                missing_tests.append(test_name)

        if missing_tests:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç—ã: {missing_tests}")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        for test_name in new_tests:
            try:
                generator_class = generators[test_name]
                generator_instance = generator_class(test_id=test_name)

                print(f"   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {test_name}...")
                test_data = generator_instance.generate()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                required_fields = ['prompt', 'expected_output', 'test_name', 'metadata']
                missing_fields = [field for field in required_fields if field not in test_data]

                if missing_fields:
                    print(f"     ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                    continue

                print("     ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                print(f"     üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(test_data['prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"     üéØ –¢–∏–ø —Ç–µ—Å—Ç–∞: {test_data['metadata'].get('test_type', 'unknown')}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {test_name}: {e}")
                continue

        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –†–µ–∑—é–º–µ:")
        print(f"   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(generators)}")
        print(f"   - –ù–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(new_tests)}")
        print("   - –í—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏."""

    print("\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("-" * 40)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['BC_TESTS_TO_RUN'] = '["t15_multi_hop_reasoning", "t16_counterfactual_reasoning"]'
    os.environ['BC_RUNS_PER_TEST'] = '1'

    try:
        config_loader = EnvConfigLoader()
        config = config_loader.load_config()

        tests_to_run = config.get('tests_to_run', [])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {tests_to_run}")

        if 't15_multi_hop_reasoning' in tests_to_run and 't16_counterfactual_reasoning' in tests_to_run:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã")
            return True
        else:
            print("‚ùå –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = test_config_loading()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤
    integration_ok = test_new_tests_integration()

    if config_ok and integration_ok:
        print("\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üìù –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ AI-Reasoning-Lab")
        sys.exit(0)
    else:
        print("\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sys.exit(1)